{"ast":null,"code":"// API Services for NutriCart Application (calls backend server)\nconst BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:4000/api';\nasync function request(path, options = {}) {\n  const res = await fetch(`${BASE_URL}${path}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      ...(options.headers || {})\n    },\n    ...options\n  });\n  if (!res.ok) {\n    let message = `Request failed (${res.status})`;\n    try {\n      const err = await res.json();\n      message = err.message || message;\n    } catch (_) {/* ignore */}\n    throw new Error(message);\n  }\n  // 204 no content\n  if (res.status === 204) return null;\n  return res.json();\n}\n\n// Authentication API\nexport const authAPI = {\n  // Login user\n  login: async (email, password) => {\n    return request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n  },\n  // Register new user\n  register: async userData => {\n    return request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  },\n  // Update user profile\n  updateProfile: async (userId, profileData) => {\n    return request(`/users/${userId}`, {\n      method: 'PATCH',\n      body: JSON.stringify(profileData)\n    });\n  },\n  // Get user by ID\n  getUser: async userId => {\n    return request(`/users/${userId}`);\n  }\n};\n\n// Diet Plans API\nexport const dietPlansAPI = {\n  // Get all diet plans\n  getAll: async () => {\n    return request('/diet-plans');\n  },\n  // Get diet plan by ID\n  getById: async id => {\n    return request(`/diet-plans/${id}`);\n  },\n  // Get diet plans by tags\n  getByTags: async tags => {\n    // optional backend route could be added; for now filter client-side\n    const all = await request('/diet-plans');\n    return all.filter(p => (p.suitableFor || []).some(t => tags.includes(t)));\n  },\n  // Start a diet plan for user\n  startPlan: async (userId, dietPlanId) => {\n    // placeholder success\n    return {\n      success: true,\n      message: `Started ${dietPlanId}`,\n      startDate: new Date().toISOString()\n    };\n  }\n};\n\n// Products API\nexport const productsAPI = {\n  // Get all products\n  getAll: async () => {\n    return request('/products');\n  },\n  // Get product by ID\n  getById: async id => {\n    return request(`/products/${id}`);\n  },\n  // Get products by category\n  getByCategory: async category => {\n    const all = await request('/products');\n    return all.filter(p => p.category === category);\n  },\n  // Get products by diet\n  getByDiet: async diet => {\n    const all = await request('/products');\n    return all.filter(p => (p.dietCompatible || []).includes(diet));\n  },\n  // Search products\n  search: async query => {\n    const all = await request('/products');\n    return all.filter(p => p.name.toLowerCase().includes(query.toLowerCase()) || p.description.toLowerCase().includes(query.toLowerCase()));\n  },\n  // Get product categories\n  getCategories: async () => {\n    return request('/categories');\n  }\n};\n\n// Cart API\nexport const cartAPI = {\n  // Get user cart\n  getCart: async userId => {\n    return request(`/users/${userId}/cart`);\n  },\n  // Add item to cart\n  addItem: async (userId, productId, quantity = 1) => {\n    return request(`/users/${userId}/cart/items`, {\n      method: 'POST',\n      body: JSON.stringify({\n        productId,\n        quantity\n      })\n    });\n  },\n  // Update item quantity\n  updateQuantity: async (userId, productId, quantity) => {\n    return request(`/users/${userId}/cart/items/${productId}`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        quantity\n      })\n    });\n  },\n  // Remove item from cart\n  removeItem: async (userId, productId) => {\n    await request(`/users/${userId}/cart/items/${productId}`, {\n      method: 'DELETE'\n    });\n    return request(`/users/${userId}/cart`);\n  },\n  // Clear cart\n  clearCart: async userId => {\n    await request(`/users/${userId}/cart`, {\n      method: 'DELETE'\n    });\n    return {\n      items: [],\n      total: 0\n    };\n  }\n};\n\n// Orders API\nexport const ordersAPI = {\n  // Create order from cart\n  createOrder: async (userId, orderData) => {\n    return request(`/users/${userId}/orders`, {\n      method: 'POST',\n      body: JSON.stringify(orderData)\n    });\n  },\n  // Get user orders\n  getUserOrders: async userId => {\n    return request(`/users/${userId}/orders`);\n  },\n  // Get order by ID\n  getOrderById: async orderId => {\n    // Optional: implement endpoint in backend if needed\n    throw new Error('Not implemented');\n  }\n};\n\n// Recipes API\nexport const recipesAPI = {\n  // Get all recipes\n  getAll: async () => {\n    return request('/recipes'); // not yet implemented server-side\n  },\n  // Get recipe by ID\n  getById: async id => {\n    throw new Error('Not implemented');\n  },\n  // Get recipes by diet\n  getByDiet: async diet => {\n    throw new Error('Not implemented');\n  },\n  // Get recipes by ingredients (pantry sync)\n  getByIngredients: async ingredients => {\n    throw new Error('Not implemented');\n  }\n};\n\n// Partnerships API\nexport const partnershipsAPI = {\n  // Get all partnerships\n  getAll: async () => {\n    return request('/partnerships'); // not yet implemented server-side\n  },\n  // Get partnership by ID\n  getById: async id => {\n    throw new Error('Not implemented');\n  }\n};\n\n// User Progress API\nexport const progressAPI = {\n  // Get user progress\n  getUserProgress: async userId => {\n    throw new Error('Not implemented');\n  },\n  // Update user progress\n  updateProgress: async (userId, progressData) => {\n    throw new Error('Not implemented');\n  }\n};\n\n// Dashboard API\nexport const dashboardAPI = {\n  // Get dashboard data\n  getDashboardData: async userId => {\n    const user = await authAPI.getUser(userId);\n    const cart = await cartAPI.getCart(userId);\n    const orders = await ordersAPI.getUserOrders(userId);\n    return {\n      user,\n      cart,\n      recentOrders: orders.slice(0, 3)\n    };\n  }\n};\n\n// Export all APIs\nexport default {\n  auth: authAPI,\n  dietPlans: dietPlansAPI,\n  products: productsAPI,\n  cart: cartAPI,\n  orders: ordersAPI,\n  recipes: recipesAPI,\n  partnerships: partnershipsAPI,\n  progress: progressAPI,\n  dashboard: dashboardAPI\n};","map":{"version":3,"names":["BASE_URL","process","env","REACT_APP_API_BASE_URL","request","path","options","res","fetch","headers","ok","message","status","err","json","_","Error","authAPI","login","email","password","method","body","JSON","stringify","register","userData","updateProfile","userId","profileData","getUser","dietPlansAPI","getAll","getById","id","getByTags","tags","all","filter","p","suitableFor","some","t","includes","startPlan","dietPlanId","success","startDate","Date","toISOString","productsAPI","getByCategory","category","getByDiet","diet","dietCompatible","search","query","name","toLowerCase","description","getCategories","cartAPI","getCart","addItem","productId","quantity","updateQuantity","removeItem","clearCart","items","total","ordersAPI","createOrder","orderData","getUserOrders","getOrderById","orderId","recipesAPI","getByIngredients","ingredients","partnershipsAPI","progressAPI","getUserProgress","updateProgress","progressData","dashboardAPI","getDashboardData","user","cart","orders","recentOrders","slice","auth","dietPlans","products","recipes","partnerships","progress","dashboard"],"sources":["C:/Users data/Rachit/NutriCart Project/nutriCart/src/services/api.js"],"sourcesContent":["// API Services for NutriCart Application (calls backend server)\r\nconst BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:4000/api';\r\n\r\nasync function request(path, options = {}) {\r\n  const res = await fetch(`${BASE_URL}${path}`, {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...(options.headers || {})\r\n    },\r\n    ...options,\r\n  });\r\n  if (!res.ok) {\r\n    let message = `Request failed (${res.status})`;\r\n    try {\r\n      const err = await res.json();\r\n      message = err.message || message;\r\n    } catch (_) { /* ignore */ }\r\n    throw new Error(message);\r\n  }\r\n  // 204 no content\r\n  if (res.status === 204) return null;\r\n  return res.json();\r\n}\r\n\r\n// Authentication API\r\nexport const authAPI = {\r\n  // Login user\r\n  login: async (email, password) => {\r\n    return request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email, password })\r\n    });\r\n  },\r\n\r\n  // Register new user\r\n  register: async (userData) => {\r\n    return request('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData)\r\n    });\r\n  },\r\n\r\n  // Update user profile\r\n  updateProfile: async (userId, profileData) => {\r\n    return request(`/users/${userId}`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify(profileData)\r\n    });\r\n  },\r\n\r\n  // Get user by ID\r\n  getUser: async (userId) => {\r\n    return request(`/users/${userId}`);\r\n  }\r\n};\r\n\r\n// Diet Plans API\r\nexport const dietPlansAPI = {\r\n  // Get all diet plans\r\n  getAll: async () => {\r\n    return request('/diet-plans');\r\n  },\r\n\r\n  // Get diet plan by ID\r\n  getById: async (id) => {\r\n    return request(`/diet-plans/${id}`);\r\n  },\r\n\r\n  // Get diet plans by tags\r\n  getByTags: async (tags) => {\r\n    // optional backend route could be added; for now filter client-side\r\n    const all = await request('/diet-plans');\r\n    return all.filter(p => (p.suitableFor || []).some(t => tags.includes(t)));\r\n  },\r\n\r\n  // Start a diet plan for user\r\n  startPlan: async (userId, dietPlanId) => {\r\n    // placeholder success\r\n    return { success: true, message: `Started ${dietPlanId}`, startDate: new Date().toISOString() };\r\n  }\r\n};\r\n\r\n// Products API\r\nexport const productsAPI = {\r\n  // Get all products\r\n  getAll: async () => {\r\n    return request('/products');\r\n  },\r\n\r\n  // Get product by ID\r\n  getById: async (id) => {\r\n    return request(`/products/${id}`);\r\n  },\r\n\r\n  // Get products by category\r\n  getByCategory: async (category) => {\r\n    const all = await request('/products');\r\n    return all.filter(p => p.category === category);\r\n  },\r\n\r\n  // Get products by diet\r\n  getByDiet: async (diet) => {\r\n    const all = await request('/products');\r\n    return all.filter(p => (p.dietCompatible || []).includes(diet));\r\n  },\r\n\r\n  // Search products\r\n  search: async (query) => {\r\n    const all = await request('/products');\r\n    return all.filter(p => p.name.toLowerCase().includes(query.toLowerCase()) || p.description.toLowerCase().includes(query.toLowerCase()));\r\n  },\r\n\r\n  // Get product categories\r\n  getCategories: async () => {\r\n    return request('/categories');\r\n  }\r\n};\r\n\r\n// Cart API\r\nexport const cartAPI = {\r\n  // Get user cart\r\n  getCart: async (userId) => {\r\n    return request(`/users/${userId}/cart`);\r\n  },\r\n\r\n  // Add item to cart\r\n  addItem: async (userId, productId, quantity = 1) => {\r\n    return request(`/users/${userId}/cart/items`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ productId, quantity })\r\n    });\r\n  },\r\n\r\n  // Update item quantity\r\n  updateQuantity: async (userId, productId, quantity) => {\r\n    return request(`/users/${userId}/cart/items/${productId}`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify({ quantity })\r\n    });\r\n  },\r\n\r\n  // Remove item from cart\r\n  removeItem: async (userId, productId) => {\r\n    await request(`/users/${userId}/cart/items/${productId}`, { method: 'DELETE' });\r\n    return request(`/users/${userId}/cart`);\r\n  },\r\n\r\n  // Clear cart\r\n  clearCart: async (userId) => {\r\n    await request(`/users/${userId}/cart`, { method: 'DELETE' });\r\n    return { items: [], total: 0 };\r\n  }\r\n};\r\n\r\n// Orders API\r\nexport const ordersAPI = {\r\n  // Create order from cart\r\n  createOrder: async (userId, orderData) => {\r\n    return request(`/users/${userId}/orders`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(orderData)\r\n    });\r\n  },\r\n\r\n  // Get user orders\r\n  getUserOrders: async (userId) => {\r\n    return request(`/users/${userId}/orders`);\r\n  },\r\n\r\n  // Get order by ID\r\n  getOrderById: async (orderId) => {\r\n    // Optional: implement endpoint in backend if needed\r\n    throw new Error('Not implemented');\r\n  }\r\n};\r\n\r\n// Recipes API\r\nexport const recipesAPI = {\r\n  // Get all recipes\r\n  getAll: async () => {\r\n    return request('/recipes'); // not yet implemented server-side\r\n  },\r\n\r\n  // Get recipe by ID\r\n  getById: async (id) => {\r\n    throw new Error('Not implemented');\r\n  },\r\n\r\n  // Get recipes by diet\r\n  getByDiet: async (diet) => {\r\n    throw new Error('Not implemented');\r\n  },\r\n\r\n  // Get recipes by ingredients (pantry sync)\r\n  getByIngredients: async (ingredients) => {\r\n    throw new Error('Not implemented');\r\n  }\r\n};\r\n\r\n// Partnerships API\r\nexport const partnershipsAPI = {\r\n  // Get all partnerships\r\n  getAll: async () => {\r\n    return request('/partnerships'); // not yet implemented server-side\r\n  },\r\n\r\n  // Get partnership by ID\r\n  getById: async (id) => {\r\n    throw new Error('Not implemented');\r\n  }\r\n};\r\n\r\n// User Progress API\r\nexport const progressAPI = {\r\n  // Get user progress\r\n  getUserProgress: async (userId) => {\r\n    throw new Error('Not implemented');\r\n  },\r\n\r\n  // Update user progress\r\n  updateProgress: async (userId, progressData) => {\r\n    throw new Error('Not implemented');\r\n  }\r\n};\r\n\r\n// Dashboard API\r\nexport const dashboardAPI = {\r\n  // Get dashboard data\r\n  getDashboardData: async (userId) => {\r\n    const user = await authAPI.getUser(userId);\r\n    const cart = await cartAPI.getCart(userId);\r\n    const orders = await ordersAPI.getUserOrders(userId);\r\n    return { user, cart, recentOrders: orders.slice(0, 3) };\r\n  }\r\n};\r\n\r\n// Export all APIs\r\nexport default {\r\n  auth: authAPI,\r\n  dietPlans: dietPlansAPI,\r\n  products: productsAPI,\r\n  cart: cartAPI,\r\n  orders: ordersAPI,\r\n  recipes: recipesAPI,\r\n  partnerships: partnershipsAPI,\r\n  progress: progressAPI,\r\n  dashboard: dashboardAPI\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}