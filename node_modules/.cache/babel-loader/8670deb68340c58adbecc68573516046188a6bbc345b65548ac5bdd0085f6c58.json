{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users data\\\\Rachit\\\\NutriCart Project\\\\nutriCart\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { toast } from \"../components/ui/use-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\n// Mock users database (in a real app, this would be in a backend)\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst mockUsers = [{\n  id: 1,\n  email: \"demo@nutricart.com\",\n  password: \"demo123\",\n  name: \"Demo User\",\n  firstName: \"Demo\",\n  lastName: \"User\",\n  profileComplete: true,\n  preferences: {\n    dietType: \"mediterranean\",\n    allergies: [],\n    restrictions: [],\n    budget: 5000,\n    activityLevel: \"moderate\",\n    healthGoals: [\"weight_loss\", \"muscle_gain\"]\n  },\n  joinDate: \"2024-01-01\"\n}];\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Check for existing session on mount\n  useEffect(() => {\n    const checkAuth = () => {\n      try {\n        const savedUser = localStorage.getItem(\"nutriCart_user\");\n        const token = localStorage.getItem(\"nutriCart_token\");\n        if (savedUser && token) {\n          const userData = JSON.parse(savedUser);\n          setUser(userData);\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error(\"Auth check error:\", error);\n        localStorage.removeItem(\"nutriCart_user\");\n        localStorage.removeItem(\"nutriCart_token\");\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n\n  // Generate mock JWT token\n  const generateMockToken = userId => {\n    return btoa(JSON.stringify({\n      userId,\n      exp: Date.now() + 7 * 24 * 60 * 60 * 1000,\n      // 7 days\n      iat: Date.now()\n    }));\n  };\n\n  // Login function\n  const login = async (email, password, rememberMe = false) => {\n    setLoading(true);\n\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    try {\n      // Find user in mock database\n      const foundUser = mockUsers.find(u => u.email === email && u.password === password);\n      if (!foundUser) {\n        throw new Error(\"Invalid email or password\");\n      }\n\n      // Generate token\n      const token = generateMockToken(foundUser.id);\n\n      // Remove password from user object\n      const {\n        password: _,\n        ...userWithoutPassword\n      } = foundUser;\n\n      // Save to localStorage\n      if (rememberMe) {\n        localStorage.setItem(\"nutriCart_user\", JSON.stringify(userWithoutPassword));\n        localStorage.setItem(\"nutriCart_token\", token);\n      } else {\n        sessionStorage.setItem(\"nutriCart_user\", JSON.stringify(userWithoutPassword));\n        sessionStorage.setItem(\"nutriCart_token\", token);\n      }\n      setUser(userWithoutPassword);\n      setIsAuthenticated(true);\n      return userWithoutPassword;\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Signup function\n  const signup = async userData => {\n    setLoading(true);\n\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    try {\n      // Check if user already exists\n      const existingUser = mockUsers.find(u => u.email === userData.email);\n      if (existingUser) {\n        throw new Error(\"User with this email already exists\");\n      }\n\n      // Create new user\n      const newUser = {\n        id: Date.now(),\n        // Simple ID generation\n        email: userData.email,\n        password: userData.password,\n        name: userData.name,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        profileComplete: false,\n        // Will be set to true after profile setup\n        preferences: null,\n        joinDate: new Date().toISOString().split('T')[0]\n      };\n\n      // Add to mock database\n      mockUsers.push(newUser);\n\n      // Generate token\n      const token = generateMockToken(newUser.id);\n\n      // Remove password from user object\n      const {\n        password: _,\n        ...userWithoutPassword\n      } = newUser;\n\n      // Save to localStorage\n      localStorage.setItem(\"nutriCart_user\", JSON.stringify(userWithoutPassword));\n      localStorage.setItem(\"nutriCart_token\", token);\n      setUser(userWithoutPassword);\n      setIsAuthenticated(true);\n      return userWithoutPassword;\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async profileData => {\n    setLoading(true);\n\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    try {\n      const updatedUser = {\n        ...user,\n        ...profileData,\n        profileComplete: true\n      };\n\n      // Update in mock database\n      const userIndex = mockUsers.findIndex(u => u.id === user.id);\n      if (userIndex !== -1) {\n        mockUsers[userIndex] = {\n          ...mockUsers[userIndex],\n          ...updatedUser\n        };\n      }\n\n      // Update localStorage\n      localStorage.setItem(\"nutriCart_user\", JSON.stringify(updatedUser));\n      setUser(updatedUser);\n      return updatedUser;\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem(\"nutriCart_user\");\n    localStorage.removeItem(\"nutriCart_token\");\n    sessionStorage.removeItem(\"nutriCart_user\");\n    sessionStorage.removeItem(\"nutriCart_token\");\n    setUser(null);\n    setIsAuthenticated(false);\n    toast({\n      title: \"Logged out\",\n      description: \"You have been successfully logged out.\",\n      variant: \"default\"\n    });\n  };\n\n  // Check if profile is complete\n  const isProfileComplete = () => {\n    return (user === null || user === void 0 ? void 0 : user.profileComplete) || false;\n  };\n\n  // Get user preferences\n  const getUserPreferences = () => {\n    return (user === null || user === void 0 ? void 0 : user.preferences) || null;\n  };\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    signup,\n    logout,\n    updateProfile,\n    isProfileComplete,\n    getUserPreferences\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","mockUsers","id","email","password","name","firstName","lastName","profileComplete","preferences","dietType","allergies","restrictions","budget","activityLevel","healthGoals","joinDate","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","checkAuth","savedUser","localStorage","getItem","token","userData","JSON","parse","error","console","removeItem","generateMockToken","userId","btoa","stringify","exp","Date","now","iat","login","rememberMe","Promise","resolve","setTimeout","foundUser","find","u","_","userWithoutPassword","setItem","sessionStorage","signup","existingUser","newUser","toISOString","split","push","updateProfile","profileData","updatedUser","userIndex","findIndex","logout","title","description","variant","isProfileComplete","getUserPreferences","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users data/Rachit/NutriCart Project/nutriCart/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { toast } from \"../components/ui/use-toast\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\n// Mock users database (in a real app, this would be in a backend)\r\nconst mockUsers = [\r\n  {\r\n    id: 1,\r\n    email: \"demo@nutricart.com\",\r\n    password: \"demo123\",\r\n    name: \"Demo User\",\r\n    firstName: \"Demo\",\r\n    lastName: \"User\",\r\n    profileComplete: true,\r\n    preferences: {\r\n      dietType: \"mediterranean\",\r\n      allergies: [],\r\n      restrictions: [],\r\n      budget: 5000,\r\n      activityLevel: \"moderate\",\r\n      healthGoals: [\"weight_loss\", \"muscle_gain\"]\r\n    },\r\n    joinDate: \"2024-01-01\",\r\n  }\r\n];\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  // Check for existing session on mount\r\n  useEffect(() => {\r\n    const checkAuth = () => {\r\n      try {\r\n        const savedUser = localStorage.getItem(\"nutriCart_user\");\r\n        const token = localStorage.getItem(\"nutriCart_token\");\r\n        \r\n        if (savedUser && token) {\r\n          const userData = JSON.parse(savedUser);\r\n          setUser(userData);\r\n          setIsAuthenticated(true);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Auth check error:\", error);\r\n        localStorage.removeItem(\"nutriCart_user\");\r\n        localStorage.removeItem(\"nutriCart_token\");\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  // Generate mock JWT token\r\n  const generateMockToken = (userId) => {\r\n    return btoa(JSON.stringify({\r\n      userId,\r\n      exp: Date.now() + (7 * 24 * 60 * 60 * 1000), // 7 days\r\n      iat: Date.now()\r\n    }));\r\n  };\r\n\r\n  // Login function\r\n  const login = async (email, password, rememberMe = false) => {\r\n    setLoading(true);\r\n    \r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    try {\r\n      // Find user in mock database\r\n      const foundUser = mockUsers.find(u => u.email === email && u.password === password);\r\n      \r\n      if (!foundUser) {\r\n        throw new Error(\"Invalid email or password\");\r\n      }\r\n\r\n      // Generate token\r\n      const token = generateMockToken(foundUser.id);\r\n      \r\n      // Remove password from user object\r\n      const { password: _, ...userWithoutPassword } = foundUser;\r\n      \r\n      // Save to localStorage\r\n      if (rememberMe) {\r\n        localStorage.setItem(\"nutriCart_user\", JSON.stringify(userWithoutPassword));\r\n        localStorage.setItem(\"nutriCart_token\", token);\r\n      } else {\r\n        sessionStorage.setItem(\"nutriCart_user\", JSON.stringify(userWithoutPassword));\r\n        sessionStorage.setItem(\"nutriCart_token\", token);\r\n      }\r\n\r\n      setUser(userWithoutPassword);\r\n      setIsAuthenticated(true);\r\n\r\n      return userWithoutPassword;\r\n    } catch (error) {\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Signup function\r\n  const signup = async (userData) => {\r\n    setLoading(true);\r\n    \r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    try {\r\n      // Check if user already exists\r\n      const existingUser = mockUsers.find(u => u.email === userData.email);\r\n      if (existingUser) {\r\n        throw new Error(\"User with this email already exists\");\r\n      }\r\n\r\n      // Create new user\r\n      const newUser = {\r\n        id: Date.now(), // Simple ID generation\r\n        email: userData.email,\r\n        password: userData.password,\r\n        name: userData.name,\r\n        firstName: userData.firstName,\r\n        lastName: userData.lastName,\r\n        profileComplete: false, // Will be set to true after profile setup\r\n        preferences: null,\r\n        joinDate: new Date().toISOString().split('T')[0],\r\n      };\r\n\r\n      // Add to mock database\r\n      mockUsers.push(newUser);\r\n\r\n      // Generate token\r\n      const token = generateMockToken(newUser.id);\r\n      \r\n      // Remove password from user object\r\n      const { password: _, ...userWithoutPassword } = newUser;\r\n      \r\n      // Save to localStorage\r\n      localStorage.setItem(\"nutriCart_user\", JSON.stringify(userWithoutPassword));\r\n      localStorage.setItem(\"nutriCart_token\", token);\r\n\r\n      setUser(userWithoutPassword);\r\n      setIsAuthenticated(true);\r\n\r\n      return userWithoutPassword;\r\n    } catch (error) {\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update user profile\r\n  const updateProfile = async (profileData) => {\r\n    setLoading(true);\r\n    \r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n\r\n    try {\r\n      const updatedUser = {\r\n        ...user,\r\n        ...profileData,\r\n        profileComplete: true,\r\n      };\r\n\r\n      // Update in mock database\r\n      const userIndex = mockUsers.findIndex(u => u.id === user.id);\r\n      if (userIndex !== -1) {\r\n        mockUsers[userIndex] = { ...mockUsers[userIndex], ...updatedUser };\r\n      }\r\n\r\n      // Update localStorage\r\n      localStorage.setItem(\"nutriCart_user\", JSON.stringify(updatedUser));\r\n      \r\n      setUser(updatedUser);\r\n      return updatedUser;\r\n    } catch (error) {\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem(\"nutriCart_user\");\r\n    localStorage.removeItem(\"nutriCart_token\");\r\n    sessionStorage.removeItem(\"nutriCart_user\");\r\n    sessionStorage.removeItem(\"nutriCart_token\");\r\n    \r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n\r\n    toast({\r\n      title: \"Logged out\",\r\n      description: \"You have been successfully logged out.\",\r\n      variant: \"default\",\r\n    });\r\n  };\r\n\r\n  // Check if profile is complete\r\n  const isProfileComplete = () => {\r\n    return user?.profileComplete || false;\r\n  };\r\n\r\n  // Get user preferences\r\n  const getUserPreferences = () => {\r\n    return user?.preferences || null;\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    isAuthenticated,\r\n    login,\r\n    signup,\r\n    logout,\r\n    updateProfile,\r\n    isProfileComplete,\r\n    getUserPreferences,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}