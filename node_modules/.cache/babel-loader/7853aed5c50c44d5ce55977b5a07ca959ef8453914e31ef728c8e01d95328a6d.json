{"ast":null,"code":"import _objectSpread from\"C:/Users data/Rachit/NutriCart Project/nutriCart/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from\"react\";import{useAuth}from\"./AuthContext\";import{cartAPI}from\"../services/api\";import{toast}from\"../components/ui/use-toast\";import{jsx as _jsx}from\"react/jsx-runtime\";const CartContext=/*#__PURE__*/createContext();export const useCart=()=>{const context=useContext(CartContext);if(!context){throw new Error(\"useCart must be used within a CartProvider\");}return context;};export const CartProvider=_ref=>{let{children}=_ref;const{user,isAuthenticated}=useAuth();const[cart,setCart]=useState({items:[],total:0,count:0});const[loading,setLoading]=useState(false);const[updatingItems,setUpdatingItems]=useState(new Set());// Track which items are being updated\n// Load cart from API when user is authenticated\nuseEffect(()=>{if(isAuthenticated&&user!==null&&user!==void 0&&user.id){// Check if there are local cart items to sync\nconst localCart=localStorage.getItem(\"nutriCart_localCart\");if(localCart){const parsedLocalCart=JSON.parse(localCart);if(parsedLocalCart.items.length>0){// Sync local cart with backend\nsyncLocalCartWithBackend(parsedLocalCart.items);}else{loadCart();}}else{loadCart();}}else{// Load local cart when user is not authenticated\nloadLocalCart();}},[isAuthenticated,user===null||user===void 0?void 0:user.id]);// Sync local cart items with backend when user logs in\nconst syncLocalCartWithBackend=async localItems=>{try{setLoading(true);// Add each local item to the backend cart\nfor(const item of localItems){await cartAPI.addItem(user.id,item.productId,item.quantity);}// Load the updated cart from backend\nawait loadCart();// Clear local cart\nlocalStorage.removeItem(\"nutriCart_localCart\");toast({title:\"Cart Synced\",description:\"Your local cart items have been synced with your account!\",variant:\"default\"});}catch(error){console.error(\"Error syncing local cart:\",error);// If sync fails, still load the backend cart\nawait loadCart();}finally{setLoading(false);}};// Load cart from localStorage for non-authenticated users\nconst loadLocalCart=()=>{try{const localCart=localStorage.getItem(\"nutriCart_localCart\");if(localCart){const parsedCart=JSON.parse(localCart);setCart(parsedCart);}}catch(error){console.error(\"Error loading local cart:\",error);}};// Save cart to localStorage for non-authenticated users\nconst saveLocalCart=cartData=>{try{localStorage.setItem(\"nutriCart_localCart\",JSON.stringify(cartData));}catch(error){console.error(\"Error saving local cart:\",error);}};const loadCart=async()=>{try{setLoading(true);const cartData=await cartAPI.getCart(user.id);setCart(_objectSpread(_objectSpread({},cartData),{},{count:cartData.items.reduce((sum,item)=>sum+item.quantity,0)}));}catch(error){console.error(\"Error loading cart:\",error);toast({title:\"Error\",description:\"Failed to load cart. Please try again.\",variant:\"destructive\"});}finally{setLoading(false);}};const addToCart=async function(productId){let quantity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;if(isAuthenticated&&user!==null&&user!==void 0&&user.id){// User is authenticated, add to backend\ntry{setUpdatingItems(prev=>new Set(prev).add(productId));const cartData=await cartAPI.addItem(user.id,productId,quantity);setCart(_objectSpread(_objectSpread({},cartData),{},{count:cartData.items.reduce((sum,item)=>sum+item.quantity,0)}));toast({title:\"Added to Cart\",description:\"Item has been added to your cart successfully!\",variant:\"default\"});}catch(error){console.error(\"Error adding to cart:\",error);toast({title:\"Error\",description:error.message||\"Failed to add item to cart. Please try again.\",variant:\"destructive\"});}finally{setUpdatingItems(prev=>{const newSet=new Set(prev);newSet.delete(productId);return newSet;});}}else{// User is not authenticated, add to local cart\nconst existingItem=cart.items.find(item=>item.productId===productId);let newCart;if(existingItem){newCart=_objectSpread(_objectSpread({},cart),{},{items:cart.items.map(item=>item.productId===productId?_objectSpread(_objectSpread({},item),{},{quantity:item.quantity+quantity}):item)});}else{newCart=_objectSpread(_objectSpread({},cart),{},{items:[...cart.items,{productId,quantity,price:0}]// Price will be loaded later\n});}newCart.count=newCart.items.reduce((sum,item)=>sum+item.quantity,0);newCart.total=newCart.items.reduce((sum,item)=>sum+item.price*item.quantity,0);setCart(newCart);saveLocalCart(newCart);toast({title:\"Added to Cart\",description:\"Item has been added to your local cart!\",variant:\"default\"});}};const updateQuantity=async(productId,quantity)=>{if(isAuthenticated&&user!==null&&user!==void 0&&user.id){// User is authenticated, update in backend\ntry{setUpdatingItems(prev=>new Set(prev).add(productId));const cartData=await cartAPI.updateQuantity(user.id,productId,quantity);setCart(_objectSpread(_objectSpread({},cartData),{},{count:cartData.items.reduce((sum,item)=>sum+item.quantity,0)}));if(quantity>0){toast({title:\"Cart Updated\",description:\"Cart quantity has been updated successfully!\",variant:\"default\"});}}catch(error){console.error(\"Error updating cart:\",error);toast({title:\"Error\",description:error.message||\"Failed to update cart. Please try again.\",variant:\"destructive\"});}finally{setUpdatingItems(prev=>{const newSet=new Set(prev);newSet.delete(productId);return newSet;});}}else{// User is not authenticated, update local cart\nconst newCart=_objectSpread(_objectSpread({},cart),{},{items:cart.items.map(item=>item.productId===productId?_objectSpread(_objectSpread({},item),{},{quantity:Math.max(0,quantity)}):item).filter(item=>item.quantity>0)});newCart.count=newCart.items.reduce((sum,item)=>sum+item.quantity,0);newCart.total=newCart.items.reduce((sum,item)=>sum+item.price*item.quantity,0);setCart(newCart);saveLocalCart(newCart);}};const removeFromCart=async productId=>{if(isAuthenticated&&user!==null&&user!==void 0&&user.id){// User is authenticated, remove from backend\ntry{setUpdatingItems(prev=>new Set(prev).add(productId));const cartData=await cartAPI.removeItem(user.id,productId);setCart(_objectSpread(_objectSpread({},cartData),{},{count:cartData.items.reduce((sum,item)=>sum+item.quantity,0)}));toast({title:\"Removed from Cart\",description:\"Item has been removed from your cart.\",variant:\"default\"});}catch(error){console.error(\"Error removing from cart:\",error);toast({title:\"Error\",description:error.message||\"Failed to remove item from cart. Please try again.\",variant:\"destructive\"});}finally{setUpdatingItems(prev=>{const newSet=new Set(prev);newSet.delete(productId);return newSet;});}}else{// User is not authenticated, remove from local cart\nconst newCart=_objectSpread(_objectSpread({},cart),{},{items:cart.items.filter(item=>item.productId!==productId)});newCart.count=newCart.items.reduce((sum,item)=>sum+item.quantity,0);newCart.total=newCart.items.reduce((sum,item)=>sum+item.price*item.quantity,0);setCart(newCart);saveLocalCart(newCart);}};const clearCart=async()=>{if(isAuthenticated&&user!==null&&user!==void 0&&user.id){// User is authenticated, clear from backend\ntry{setLoading(true);await cartAPI.clearCart(user.id);setCart({items:[],total:0,count:0});toast({title:\"Cart Cleared\",description:\"Your cart has been cleared successfully.\",variant:\"default\"});}catch(error){console.error(\"Error clearing cart:\",error);toast({title:\"Error\",description:\"Failed to clear cart. Please try again.\",variant:\"destructive\"});}finally{setLoading(false);}}else{// User is not authenticated, clear local cart\nsetCart({items:[],total:0,count:0});localStorage.removeItem(\"nutriCart_localCart\");toast({title:\"Cart Cleared\",description:\"Your local cart has been cleared.\",variant:\"default\"});}};const getItemQuantity=productId=>{const item=cart.items.find(item=>item.productId===productId);return item?item.quantity:0;};const isInCart=productId=>{return cart.items.some(item=>item.productId===productId);};const isItemUpdating=productId=>{return updatingItems.has(productId);};const value={cart,loading,addToCart,updateQuantity,removeFromCart,clearCart,getItemQuantity,isInCart,loadCart,isItemUpdating};return/*#__PURE__*/_jsx(CartContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","cartAPI","toast","jsx","_jsx","CartContext","useCart","context","Error","CartProvider","_ref","children","user","isAuthenticated","cart","setCart","items","total","count","loading","setLoading","updatingItems","setUpdatingItems","Set","id","localCart","localStorage","getItem","parsedLocalCart","JSON","parse","length","syncLocalCartWithBackend","loadCart","loadLocalCart","localItems","item","addItem","productId","quantity","removeItem","title","description","variant","error","console","parsedCart","saveLocalCart","cartData","setItem","stringify","getCart","_objectSpread","reduce","sum","addToCart","arguments","undefined","prev","add","message","newSet","delete","existingItem","find","newCart","map","price","updateQuantity","Math","max","filter","removeFromCart","clearCart","getItemQuantity","isInCart","some","isItemUpdating","has","value","Provider"],"sources":["C:/Users data/Rachit/NutriCart Project/nutriCart/src/contexts/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useAuth } from \"./AuthContext\";\nimport { cartAPI } from \"../services/api\";\nimport { toast } from \"../components/ui/use-toast\";\n\nconst CartContext = createContext();\n\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n};\n\nexport const CartProvider = ({ children }) => {\n  const { user, isAuthenticated } = useAuth();\n  const [cart, setCart] = useState({ items: [], total: 0, count: 0 });\n  const [loading, setLoading] = useState(false);\n  const [updatingItems, setUpdatingItems] = useState(new Set()); // Track which items are being updated\n\n  // Load cart from API when user is authenticated\n  useEffect(() => {\n    if (isAuthenticated && user?.id) {\n      // Check if there are local cart items to sync\n      const localCart = localStorage.getItem(\"nutriCart_localCart\");\n      if (localCart) {\n        const parsedLocalCart = JSON.parse(localCart);\n        if (parsedLocalCart.items.length > 0) {\n          // Sync local cart with backend\n          syncLocalCartWithBackend(parsedLocalCart.items);\n        } else {\n          loadCart();\n        }\n      } else {\n        loadCart();\n      }\n    } else {\n      // Load local cart when user is not authenticated\n      loadLocalCart();\n    }\n  }, [isAuthenticated, user?.id]);\n\n  // Sync local cart items with backend when user logs in\n  const syncLocalCartWithBackend = async (localItems) => {\n    try {\n      setLoading(true);\n\n      // Add each local item to the backend cart\n      for (const item of localItems) {\n        await cartAPI.addItem(user.id, item.productId, item.quantity);\n      }\n\n      // Load the updated cart from backend\n      await loadCart();\n\n      // Clear local cart\n      localStorage.removeItem(\"nutriCart_localCart\");\n\n      toast({\n        title: \"Cart Synced\",\n        description:\n          \"Your local cart items have been synced with your account!\",\n        variant: \"default\",\n      });\n    } catch (error) {\n      console.error(\"Error syncing local cart:\", error);\n      // If sync fails, still load the backend cart\n      await loadCart();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load cart from localStorage for non-authenticated users\n  const loadLocalCart = () => {\n    try {\n      const localCart = localStorage.getItem(\"nutriCart_localCart\");\n      if (localCart) {\n        const parsedCart = JSON.parse(localCart);\n        setCart(parsedCart);\n      }\n    } catch (error) {\n      console.error(\"Error loading local cart:\", error);\n    }\n  };\n\n  // Save cart to localStorage for non-authenticated users\n  const saveLocalCart = (cartData) => {\n    try {\n      localStorage.setItem(\"nutriCart_localCart\", JSON.stringify(cartData));\n    } catch (error) {\n      console.error(\"Error saving local cart:\", error);\n    }\n  };\n\n  const loadCart = async () => {\n    try {\n      setLoading(true);\n      const cartData = await cartAPI.getCart(user.id);\n      setCart({\n        ...cartData,\n        count: cartData.items.reduce((sum, item) => sum + item.quantity, 0),\n      });\n    } catch (error) {\n      console.error(\"Error loading cart:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load cart. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addToCart = async (productId, quantity = 1) => {\n    if (isAuthenticated && user?.id) {\n      // User is authenticated, add to backend\n      try {\n        setUpdatingItems((prev) => new Set(prev).add(productId));\n\n        const cartData = await cartAPI.addItem(user.id, productId, quantity);\n\n        setCart({\n          ...cartData,\n          count: cartData.items.reduce((sum, item) => sum + item.quantity, 0),\n        });\n\n        toast({\n          title: \"Added to Cart\",\n          description: \"Item has been added to your cart successfully!\",\n          variant: \"default\",\n        });\n      } catch (error) {\n        console.error(\"Error adding to cart:\", error);\n        toast({\n          title: \"Error\",\n          description:\n            error.message || \"Failed to add item to cart. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setUpdatingItems((prev) => {\n          const newSet = new Set(prev);\n          newSet.delete(productId);\n          return newSet;\n        });\n      }\n    } else {\n      // User is not authenticated, add to local cart\n      const existingItem = cart.items.find(\n        (item) => item.productId === productId\n      );\n      let newCart;\n\n      if (existingItem) {\n        newCart = {\n          ...cart,\n          items: cart.items.map((item) =>\n            item.productId === productId\n              ? { ...item, quantity: item.quantity + quantity }\n              : item\n          ),\n        };\n      } else {\n        newCart = {\n          ...cart,\n          items: [...cart.items, { productId, quantity, price: 0 }], // Price will be loaded later\n        };\n      }\n\n      newCart.count = newCart.items.reduce(\n        (sum, item) => sum + item.quantity,\n        0\n      );\n      newCart.total = newCart.items.reduce(\n        (sum, item) => sum + item.price * item.quantity,\n        0\n      );\n\n      setCart(newCart);\n      saveLocalCart(newCart);\n\n      toast({\n        title: \"Added to Cart\",\n        description: \"Item has been added to your local cart!\",\n        variant: \"default\",\n      });\n    }\n  };\n\n  const updateQuantity = async (productId, quantity) => {\n    if (isAuthenticated && user?.id) {\n      // User is authenticated, update in backend\n      try {\n        setUpdatingItems((prev) => new Set(prev).add(productId));\n\n        const cartData = await cartAPI.updateQuantity(\n          user.id,\n          productId,\n          quantity\n        );\n\n        setCart({\n          ...cartData,\n          count: cartData.items.reduce((sum, item) => sum + item.quantity, 0),\n        });\n\n        if (quantity > 0) {\n          toast({\n            title: \"Cart Updated\",\n            description: \"Cart quantity has been updated successfully!\",\n            variant: \"default\",\n          });\n        }\n      } catch (error) {\n        console.error(\"Error updating cart:\", error);\n        toast({\n          title: \"Error\",\n          description:\n            error.message || \"Failed to update cart. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setUpdatingItems((prev) => {\n          const newSet = new Set(prev);\n          newSet.delete(productId);\n          return newSet;\n        });\n      }\n    } else {\n      // User is not authenticated, update local cart\n      const newCart = {\n        ...cart,\n        items: cart.items\n          .map((item) =>\n            item.productId === productId\n              ? { ...item, quantity: Math.max(0, quantity) }\n              : item\n          )\n          .filter((item) => item.quantity > 0),\n      };\n\n      newCart.count = newCart.items.reduce(\n        (sum, item) => sum + item.quantity,\n        0\n      );\n      newCart.total = newCart.items.reduce(\n        (sum, item) => sum + item.price * item.quantity,\n        0\n      );\n\n      setCart(newCart);\n      saveLocalCart(newCart);\n    }\n  };\n\n  const removeFromCart = async (productId) => {\n    if (isAuthenticated && user?.id) {\n      // User is authenticated, remove from backend\n      try {\n        setUpdatingItems((prev) => new Set(prev).add(productId));\n\n        const cartData = await cartAPI.removeItem(user.id, productId);\n\n        setCart({\n          ...cartData,\n          count: cartData.items.reduce((sum, item) => sum + item.quantity, 0),\n        });\n\n        toast({\n          title: \"Removed from Cart\",\n          description: \"Item has been removed from your cart.\",\n          variant: \"default\",\n        });\n      } catch (error) {\n        console.error(\"Error removing from cart:\", error);\n        toast({\n          title: \"Error\",\n          description:\n            error.message ||\n            \"Failed to remove item from cart. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setUpdatingItems((prev) => {\n          const newSet = new Set(prev);\n          newSet.delete(productId);\n          return newSet;\n        });\n      }\n    } else {\n      // User is not authenticated, remove from local cart\n      const newCart = {\n        ...cart,\n        items: cart.items.filter((item) => item.productId !== productId),\n      };\n\n      newCart.count = newCart.items.reduce(\n        (sum, item) => sum + item.quantity,\n        0\n      );\n      newCart.total = newCart.items.reduce(\n        (sum, item) => sum + item.price * item.quantity,\n        0\n      );\n\n      setCart(newCart);\n      saveLocalCart(newCart);\n    }\n  };\n\n  const clearCart = async () => {\n    if (isAuthenticated && user?.id) {\n      // User is authenticated, clear from backend\n      try {\n        setLoading(true);\n        await cartAPI.clearCart(user.id);\n        setCart({ items: [], total: 0, count: 0 });\n\n        toast({\n          title: \"Cart Cleared\",\n          description: \"Your cart has been cleared successfully.\",\n          variant: \"default\",\n        });\n      } catch (error) {\n        console.error(\"Error clearing cart:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to clear cart. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      // User is not authenticated, clear local cart\n      setCart({ items: [], total: 0, count: 0 });\n      localStorage.removeItem(\"nutriCart_localCart\");\n\n      toast({\n        title: \"Cart Cleared\",\n        description: \"Your local cart has been cleared.\",\n        variant: \"default\",\n      });\n    }\n  };\n\n  const getItemQuantity = (productId) => {\n    const item = cart.items.find((item) => item.productId === productId);\n    return item ? item.quantity : 0;\n  };\n\n  const isInCart = (productId) => {\n    return cart.items.some((item) => item.productId === productId);\n  };\n\n  const isItemUpdating = (productId) => {\n    return updatingItems.has(productId);\n  };\n\n  const value = {\n    cart,\n    loading,\n    addToCart,\n    updateQuantity,\n    removeFromCart,\n    clearCart,\n    getItemQuantity,\n    isInCart,\n    loadCart,\n    isItemUpdating,\n  };\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}