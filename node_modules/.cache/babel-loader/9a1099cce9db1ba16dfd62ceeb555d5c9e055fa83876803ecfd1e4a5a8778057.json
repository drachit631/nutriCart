{"ast":null,"code":"// API Services for NutriCart Application\nimport { dbHelpers } from '../data/database';\n\n// Simulate API delay for realistic experience\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// Authentication API\nexport const authAPI = {\n  // Login user\n  login: async (email, password) => {\n    await delay(1000); // Simulate network delay\n\n    const user = dbHelpers.findUserByEmail(email);\n    if (!user || user.password !== password) {\n      throw new Error('Invalid email or password');\n    }\n\n    // Update last login\n    dbHelpers.updateUser(user.id, {\n      lastLogin: new Date().toISOString()\n    });\n\n    // Generate mock JWT token\n    const token = `mock-jwt-${user.id}-${Date.now()}`;\n    return {\n      user: {\n        id: user.id,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        email: user.email,\n        profileComplete: user.profileComplete,\n        subscription: user.subscription,\n        preferences: user.preferences\n      },\n      token\n    };\n  },\n  // Register new user\n  register: async userData => {\n    await delay(1000);\n\n    // Check if user already exists\n    const existingUser = dbHelpers.findUserByEmail(userData.email);\n    if (existingUser) {\n      throw new Error('User with this email already exists');\n    }\n\n    // Create new user\n    const newUser = dbHelpers.createUser(userData);\n\n    // Generate mock JWT token\n    const token = `mock-jwt-${newUser.id}-${Date.now()}`;\n    return {\n      user: {\n        id: newUser.id,\n        firstName: newUser.firstName,\n        lastName: newUser.lastName,\n        email: newUser.email,\n        profileComplete: newUser.profileComplete,\n        subscription: newUser.subscription,\n        preferences: newUser.preferences\n      },\n      token\n    };\n  },\n  // Update user profile\n  updateProfile: async (userId, profileData) => {\n    await delay(800);\n    const updatedUser = dbHelpers.updateUser(userId, {\n      ...profileData,\n      profileComplete: true\n    });\n    if (!updatedUser) {\n      throw new Error('User not found');\n    }\n    return {\n      id: updatedUser.id,\n      firstName: updatedUser.firstName,\n      lastName: updatedUser.lastName,\n      email: updatedUser.email,\n      profileComplete: updatedUser.profileComplete,\n      subscription: updatedUser.subscription,\n      preferences: updatedUser.preferences\n    };\n  },\n  // Get user by ID\n  getUser: async userId => {\n    await delay(500);\n    const user = dbHelpers.findUserById(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n    return {\n      id: user.id,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      profileComplete: user.profileComplete,\n      subscription: user.subscription,\n      preferences: user.preferences\n    };\n  }\n};\n\n// Diet Plans API\nexport const dietPlansAPI = {\n  // Get all diet plans\n  getAll: async () => {\n    await delay(600);\n    return dbHelpers.getAllDietPlans();\n  },\n  // Get diet plan by ID\n  getById: async id => {\n    await delay(400);\n    const plan = dbHelpers.getDietPlanById(id);\n    if (!plan) {\n      throw new Error('Diet plan not found');\n    }\n    return plan;\n  },\n  // Get diet plans by tags\n  getByTags: async tags => {\n    await delay(500);\n    return dbHelpers.getDietPlansByTags(tags);\n  },\n  // Start a diet plan for user\n  startPlan: async (userId, dietPlanId) => {\n    await delay(800);\n\n    // In a real app, this would create a user progress record\n    // For now, we'll just return success\n    return {\n      success: true,\n      message: `Successfully started ${dietPlanId} diet plan`,\n      startDate: new Date().toISOString()\n    };\n  }\n};\n\n// Products API\nexport const productsAPI = {\n  // Get all products\n  getAll: async () => {\n    await delay(500);\n    return dbHelpers.getAllProducts();\n  },\n  // Get product by ID\n  getById: async id => {\n    await delay(300);\n    const product = dbHelpers.getProductById(id);\n    if (!product) {\n      throw new Error('Product not found');\n    }\n    return product;\n  },\n  // Get products by category\n  getByCategory: async category => {\n    await delay(400);\n    return dbHelpers.getProductsByCategory(category);\n  },\n  // Get products by diet\n  getByDiet: async diet => {\n    await delay(400);\n    return dbHelpers.getProductsByDiet(diet);\n  },\n  // Search products\n  search: async query => {\n    await delay(600);\n    return dbHelpers.searchProducts(query);\n  },\n  // Get product categories\n  getCategories: async () => {\n    await delay(300);\n    return [{\n      id: \"grains\",\n      name: \"Grains\",\n      icon: \"🌾\",\n      description: \"Whole grains and cereals\"\n    }, {\n      id: \"seafood\",\n      name: \"Seafood\",\n      icon: \"🐟\",\n      description: \"Fresh fish and seafood\"\n    }, {\n      id: \"fruits\",\n      name: \"Fruits\",\n      icon: \"🍎\",\n      description: \"Fresh fruits and berries\"\n    }, {\n      id: \"dairy\",\n      name: \"Dairy\",\n      icon: \"🥛\",\n      description: \"Dairy products and alternatives\"\n    }, {\n      id: \"nuts\",\n      name: \"Nuts\",\n      icon: \"🥜\",\n      description: \"Nuts, seeds, and dried fruits\"\n    }, {\n      id: \"vegetables\",\n      name: \"Vegetables\",\n      icon: \"🥬\",\n      description: \"Fresh vegetables and greens\"\n    }, {\n      id: \"meat\",\n      name: \"Meat\",\n      icon: \"🥩\",\n      description: \"Fresh meat and poultry\"\n    }, {\n      id: \"oils\",\n      name: \"Oils\",\n      icon: \"🫒\",\n      description: \"Cooking oils and fats\"\n    }];\n  }\n};\n\n// Cart API\nexport const cartAPI = {\n  // Get user cart\n  getCart: async userId => {\n    await delay(400);\n    const cart = dbHelpers.getUserCart(userId);\n    return cart || {\n      items: [],\n      total: 0\n    };\n  },\n  // Add item to cart\n  addItem: async (userId, productId, quantity = 1) => {\n    await delay(600);\n    const product = dbHelpers.getProductById(productId);\n    if (!product) {\n      throw new Error('Product not found');\n    }\n    if (!product.inStock) {\n      throw new Error('Product is out of stock');\n    }\n    const cart = dbHelpers.getUserCart(userId) || {\n      items: [],\n      total: 0\n    };\n    const existingItemIndex = cart.items.findIndex(item => item.productId === productId);\n    if (existingItemIndex !== -1) {\n      cart.items[existingItemIndex].quantity += quantity;\n    } else {\n      cart.items.push({\n        productId,\n        quantity,\n        price: product.price\n      });\n    }\n    const total = cart.items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n    dbHelpers.updateCart(userId, cart.items);\n    return {\n      items: cart.items,\n      total\n    };\n  },\n  // Update item quantity\n  updateQuantity: async (userId, productId, quantity) => {\n    await delay(500);\n    const cart = dbHelpers.getUserCart(userId);\n    if (!cart) {\n      throw new Error('Cart not found');\n    }\n    const itemIndex = cart.items.findIndex(item => item.productId === productId);\n    if (itemIndex === -1) {\n      throw new Error('Item not found in cart');\n    }\n    if (quantity <= 0) {\n      cart.items.splice(itemIndex, 1);\n    } else {\n      cart.items[itemIndex].quantity = quantity;\n    }\n    const total = cart.items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n    dbHelpers.updateCart(userId, cart.items);\n    return {\n      items: cart.items,\n      total\n    };\n  },\n  // Remove item from cart\n  removeItem: async (userId, productId) => {\n    await delay(400);\n    const cart = dbHelpers.getUserCart(userId);\n    if (!cart) {\n      throw new Error('Cart not found');\n    }\n    const filteredItems = cart.items.filter(item => item.productId !== productId);\n    const total = filteredItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\n    dbHelpers.updateCart(userId, filteredItems);\n    return {\n      items: filteredItems,\n      total\n    };\n  },\n  // Clear cart\n  clearCart: async userId => {\n    await delay(300);\n    dbHelpers.updateCart(userId, []);\n    return {\n      items: [],\n      total: 0\n    };\n  }\n};\n\n// Orders API\nexport const ordersAPI = {\n  // Create order from cart\n  createOrder: async (userId, orderData) => {\n    await delay(1000);\n    const cart = dbHelpers.getUserCart(userId);\n    if (!cart || cart.items.length === 0) {\n      throw new Error('Cart is empty');\n    }\n    const order = dbHelpers.createOrder({\n      userId,\n      items: cart.items,\n      total: cart.total,\n      ...orderData\n    });\n\n    // Clear cart after order creation\n    dbHelpers.updateCart(userId, []);\n    return order;\n  },\n  // Get user orders\n  getUserOrders: async userId => {\n    await delay(600);\n    return dbHelpers.getUserOrders(userId);\n  },\n  // Get order by ID\n  getOrderById: async orderId => {\n    await delay(400);\n    const order = dbHelpers.getOrderById(orderId); // Assuming getOrderById is available in dbHelpers\n    if (!order) {\n      throw new Error('Order not found');\n    }\n    return order;\n  }\n};\n\n// Recipes API\nexport const recipesAPI = {\n  // Get all recipes\n  getAll: async () => {\n    await delay(500);\n    return dbHelpers.getAllRecipes();\n  },\n  // Get recipe by ID\n  getById: async id => {\n    await delay(400);\n    const recipe = dbHelpers.getRecipeById(id);\n    if (!recipe) {\n      throw new Error('Recipe not found');\n    }\n    return recipe;\n  },\n  // Get recipes by diet\n  getByDiet: async diet => {\n    await delay(400);\n    return dbHelpers.getRecipesByDiet(diet);\n  },\n  // Get recipes by ingredients (pantry sync)\n  getByIngredients: async ingredients => {\n    await delay(800);\n\n    // This would be a complex algorithm in a real app\n    // For now, we'll return recipes that use some of the ingredients\n    const allRecipes = dbHelpers.getAllRecipes();\n    const matchingRecipes = allRecipes.filter(recipe => {\n      const recipeIngredients = recipe.ingredients.map(ing => ing.name.toLowerCase());\n      const userIngredients = ingredients.map(ing => ing.toLowerCase());\n      return recipeIngredients.some(recipeIng => userIngredients.some(userIng => userIng.includes(recipeIng) || recipeIng.includes(userIng)));\n    });\n    return matchingRecipes;\n  }\n};\n\n// Partnerships API\nexport const partnershipsAPI = {\n  // Get all partnerships\n  getAll: async () => {\n    await delay(500);\n    return dbHelpers.getAllPartnerships();\n  },\n  // Get partnership by ID\n  getById: async id => {\n    await delay(400);\n    const partnership = dbHelpers.getPartnershipById(id);\n    if (!partnership) {\n      throw new Error('Partnership not found');\n    }\n    return partnership;\n  }\n};\n\n// User Progress API\nexport const progressAPI = {\n  // Get user progress\n  getUserProgress: async userId => {\n    await delay(600);\n\n    // In a real app, this would fetch from database\n    // For now, return mock data\n    return {\n      currentDietPlan: \"keto\",\n      startDate: \"2024-01-15T00:00:00Z\",\n      currentWeight: 75,\n      targetWeight: 70,\n      measurements: {\n        waist: 32,\n        chest: 42,\n        arms: 14\n      },\n      progressPhotos: [],\n      notes: \"Feeling great on keto, energy levels are high\"\n    };\n  },\n  // Update user progress\n  updateProgress: async (userId, progressData) => {\n    await delay(800);\n\n    // In a real app, this would update the database\n    return {\n      success: true,\n      message: \"Progress updated successfully\",\n      updatedAt: new Date().toISOString()\n    };\n  }\n};\n\n// Dashboard API\nexport const dashboardAPI = {\n  // Get dashboard data\n  getDashboardData: async userId => {\n    await delay(1000);\n    const user = await authAPI.getUser(userId);\n    const cart = await cartAPI.getCart(userId);\n    const orders = await ordersAPI.getUserOrders(userId);\n    const progress = await progressAPI.getUserProgress(userId);\n    return {\n      user,\n      cart,\n      recentOrders: orders.slice(0, 3),\n      progress,\n      recommendations: {\n        products: dbHelpers.getAllProducts().slice(0, 4),\n        recipes: dbHelpers.getAllRecipes().slice(0, 3)\n      }\n    };\n  }\n};\n\n// Export all APIs\nexport default {\n  auth: authAPI,\n  dietPlans: dietPlansAPI,\n  products: productsAPI,\n  cart: cartAPI,\n  orders: ordersAPI,\n  recipes: recipesAPI,\n  partnerships: partnershipsAPI,\n  progress: progressAPI,\n  dashboard: dashboardAPI\n};","map":{"version":3,"names":["dbHelpers","delay","ms","Promise","resolve","setTimeout","authAPI","login","email","password","user","findUserByEmail","Error","updateUser","id","lastLogin","Date","toISOString","token","now","firstName","lastName","profileComplete","subscription","preferences","register","userData","existingUser","newUser","createUser","updateProfile","userId","profileData","updatedUser","getUser","findUserById","dietPlansAPI","getAll","getAllDietPlans","getById","plan","getDietPlanById","getByTags","tags","getDietPlansByTags","startPlan","dietPlanId","success","message","startDate","productsAPI","getAllProducts","product","getProductById","getByCategory","category","getProductsByCategory","getByDiet","diet","getProductsByDiet","search","query","searchProducts","getCategories","name","icon","description","cartAPI","getCart","cart","getUserCart","items","total","addItem","productId","quantity","inStock","existingItemIndex","findIndex","item","push","price","reduce","sum","updateCart","updateQuantity","itemIndex","splice","removeItem","filteredItems","filter","clearCart","ordersAPI","createOrder","orderData","length","order","getUserOrders","getOrderById","orderId","recipesAPI","getAllRecipes","recipe","getRecipeById","getRecipesByDiet","getByIngredients","ingredients","allRecipes","matchingRecipes","recipeIngredients","map","ing","toLowerCase","userIngredients","some","recipeIng","userIng","includes","partnershipsAPI","getAllPartnerships","partnership","getPartnershipById","progressAPI","getUserProgress","currentDietPlan","currentWeight","targetWeight","measurements","waist","chest","arms","progressPhotos","notes","updateProgress","progressData","updatedAt","dashboardAPI","getDashboardData","orders","progress","recentOrders","slice","recommendations","products","recipes","auth","dietPlans","partnerships","dashboard"],"sources":["C:/Users data/Rachit/NutriCart Project/nutriCart/src/services/api.js"],"sourcesContent":["// API Services for NutriCart Application\r\nimport { dbHelpers } from '../data/database';\r\n\r\n// Simulate API delay for realistic experience\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// Authentication API\r\nexport const authAPI = {\r\n  // Login user\r\n  login: async (email, password) => {\r\n    await delay(1000); // Simulate network delay\r\n    \r\n    const user = dbHelpers.findUserByEmail(email);\r\n    if (!user || user.password !== password) {\r\n      throw new Error('Invalid email or password');\r\n    }\r\n    \r\n    // Update last login\r\n    dbHelpers.updateUser(user.id, { lastLogin: new Date().toISOString() });\r\n    \r\n    // Generate mock JWT token\r\n    const token = `mock-jwt-${user.id}-${Date.now()}`;\r\n    \r\n    return {\r\n      user: {\r\n        id: user.id,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        email: user.email,\r\n        profileComplete: user.profileComplete,\r\n        subscription: user.subscription,\r\n        preferences: user.preferences\r\n      },\r\n      token\r\n    };\r\n  },\r\n\r\n  // Register new user\r\n  register: async (userData) => {\r\n    await delay(1000);\r\n    \r\n    // Check if user already exists\r\n    const existingUser = dbHelpers.findUserByEmail(userData.email);\r\n    if (existingUser) {\r\n      throw new Error('User with this email already exists');\r\n    }\r\n    \r\n    // Create new user\r\n    const newUser = dbHelpers.createUser(userData);\r\n    \r\n    // Generate mock JWT token\r\n    const token = `mock-jwt-${newUser.id}-${Date.now()}`;\r\n    \r\n    return {\r\n      user: {\r\n        id: newUser.id,\r\n        firstName: newUser.firstName,\r\n        lastName: newUser.lastName,\r\n        email: newUser.email,\r\n        profileComplete: newUser.profileComplete,\r\n        subscription: newUser.subscription,\r\n        preferences: newUser.preferences\r\n      },\r\n      token\r\n    };\r\n  },\r\n\r\n  // Update user profile\r\n  updateProfile: async (userId, profileData) => {\r\n    await delay(800);\r\n    \r\n    const updatedUser = dbHelpers.updateUser(userId, {\r\n      ...profileData,\r\n      profileComplete: true\r\n    });\r\n    \r\n    if (!updatedUser) {\r\n      throw new Error('User not found');\r\n    }\r\n    \r\n    return {\r\n      id: updatedUser.id,\r\n      firstName: updatedUser.firstName,\r\n      lastName: updatedUser.lastName,\r\n      email: updatedUser.email,\r\n      profileComplete: updatedUser.profileComplete,\r\n      subscription: updatedUser.subscription,\r\n      preferences: updatedUser.preferences\r\n    };\r\n  },\r\n\r\n  // Get user by ID\r\n  getUser: async (userId) => {\r\n    await delay(500);\r\n    \r\n    const user = dbHelpers.findUserById(userId);\r\n    if (!user) {\r\n      throw new Error('User not found');\r\n    }\r\n    \r\n    return {\r\n      id: user.id,\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      email: user.email,\r\n      profileComplete: user.profileComplete,\r\n      subscription: user.subscription,\r\n      preferences: user.preferences\r\n    };\r\n  }\r\n};\r\n\r\n// Diet Plans API\r\nexport const dietPlansAPI = {\r\n  // Get all diet plans\r\n  getAll: async () => {\r\n    await delay(600);\r\n    return dbHelpers.getAllDietPlans();\r\n  },\r\n\r\n  // Get diet plan by ID\r\n  getById: async (id) => {\r\n    await delay(400);\r\n    const plan = dbHelpers.getDietPlanById(id);\r\n    if (!plan) {\r\n      throw new Error('Diet plan not found');\r\n    }\r\n    return plan;\r\n  },\r\n\r\n  // Get diet plans by tags\r\n  getByTags: async (tags) => {\r\n    await delay(500);\r\n    return dbHelpers.getDietPlansByTags(tags);\r\n  },\r\n\r\n  // Start a diet plan for user\r\n  startPlan: async (userId, dietPlanId) => {\r\n    await delay(800);\r\n    \r\n    // In a real app, this would create a user progress record\r\n    // For now, we'll just return success\r\n    return {\r\n      success: true,\r\n      message: `Successfully started ${dietPlanId} diet plan`,\r\n      startDate: new Date().toISOString()\r\n    };\r\n  }\r\n};\r\n\r\n// Products API\r\nexport const productsAPI = {\r\n  // Get all products\r\n  getAll: async () => {\r\n    await delay(500);\r\n    return dbHelpers.getAllProducts();\r\n  },\r\n\r\n  // Get product by ID\r\n  getById: async (id) => {\r\n    await delay(300);\r\n    const product = dbHelpers.getProductById(id);\r\n    if (!product) {\r\n      throw new Error('Product not found');\r\n    }\r\n    return product;\r\n  },\r\n\r\n  // Get products by category\r\n  getByCategory: async (category) => {\r\n    await delay(400);\r\n    return dbHelpers.getProductsByCategory(category);\r\n  },\r\n\r\n  // Get products by diet\r\n  getByDiet: async (diet) => {\r\n    await delay(400);\r\n    return dbHelpers.getProductsByDiet(diet);\r\n  },\r\n\r\n  // Search products\r\n  search: async (query) => {\r\n    await delay(600);\r\n    return dbHelpers.searchProducts(query);\r\n  },\r\n\r\n  // Get product categories\r\n  getCategories: async () => {\r\n    await delay(300);\r\n    return [\r\n      { id: \"grains\", name: \"Grains\", icon: \"🌾\", description: \"Whole grains and cereals\" },\r\n      { id: \"seafood\", name: \"Seafood\", icon: \"🐟\", description: \"Fresh fish and seafood\" },\r\n      { id: \"fruits\", name: \"Fruits\", icon: \"🍎\", description: \"Fresh fruits and berries\" },\r\n      { id: \"dairy\", name: \"Dairy\", icon: \"🥛\", description: \"Dairy products and alternatives\" },\r\n      { id: \"nuts\", name: \"Nuts\", icon: \"🥜\", description: \"Nuts, seeds, and dried fruits\" },\r\n      { id: \"vegetables\", name: \"Vegetables\", icon: \"🥬\", description: \"Fresh vegetables and greens\" },\r\n      { id: \"meat\", name: \"Meat\", icon: \"🥩\", description: \"Fresh meat and poultry\" },\r\n      { id: \"oils\", name: \"Oils\", icon: \"🫒\", description: \"Cooking oils and fats\" }\r\n    ];\r\n  }\r\n};\r\n\r\n// Cart API\r\nexport const cartAPI = {\r\n  // Get user cart\r\n  getCart: async (userId) => {\r\n    await delay(400);\r\n    const cart = dbHelpers.getUserCart(userId);\r\n    return cart || { items: [], total: 0 };\r\n  },\r\n\r\n  // Add item to cart\r\n  addItem: async (userId, productId, quantity = 1) => {\r\n    await delay(600);\r\n    \r\n    const product = dbHelpers.getProductById(productId);\r\n    if (!product) {\r\n      throw new Error('Product not found');\r\n    }\r\n    \r\n    if (!product.inStock) {\r\n      throw new Error('Product is out of stock');\r\n    }\r\n    \r\n    const cart = dbHelpers.getUserCart(userId) || { items: [], total: 0 };\r\n    const existingItemIndex = cart.items.findIndex(item => item.productId === productId);\r\n    \r\n    if (existingItemIndex !== -1) {\r\n      cart.items[existingItemIndex].quantity += quantity;\r\n    } else {\r\n      cart.items.push({\r\n        productId,\r\n        quantity,\r\n        price: product.price\r\n      });\r\n    }\r\n    \r\n    const total = cart.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\r\n    dbHelpers.updateCart(userId, cart.items);\r\n    \r\n    return { items: cart.items, total };\r\n  },\r\n\r\n  // Update item quantity\r\n  updateQuantity: async (userId, productId, quantity) => {\r\n    await delay(500);\r\n    \r\n    const cart = dbHelpers.getUserCart(userId);\r\n    if (!cart) {\r\n      throw new Error('Cart not found');\r\n    }\r\n    \r\n    const itemIndex = cart.items.findIndex(item => item.productId === productId);\r\n    if (itemIndex === -1) {\r\n      throw new Error('Item not found in cart');\r\n    }\r\n    \r\n    if (quantity <= 0) {\r\n      cart.items.splice(itemIndex, 1);\r\n    } else {\r\n      cart.items[itemIndex].quantity = quantity;\r\n    }\r\n    \r\n    const total = cart.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\r\n    dbHelpers.updateCart(userId, cart.items);\r\n    \r\n    return { items: cart.items, total };\r\n  },\r\n\r\n  // Remove item from cart\r\n  removeItem: async (userId, productId) => {\r\n    await delay(400);\r\n    \r\n    const cart = dbHelpers.getUserCart(userId);\r\n    if (!cart) {\r\n      throw new Error('Cart not found');\r\n    }\r\n    \r\n    const filteredItems = cart.items.filter(item => item.productId !== productId);\r\n    const total = filteredItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\r\n    \r\n    dbHelpers.updateCart(userId, filteredItems);\r\n    \r\n    return { items: filteredItems, total };\r\n  },\r\n\r\n  // Clear cart\r\n  clearCart: async (userId) => {\r\n    await delay(300);\r\n    dbHelpers.updateCart(userId, []);\r\n    return { items: [], total: 0 };\r\n  }\r\n};\r\n\r\n// Orders API\r\nexport const ordersAPI = {\r\n  // Create order from cart\r\n  createOrder: async (userId, orderData) => {\r\n    await delay(1000);\r\n    \r\n    const cart = dbHelpers.getUserCart(userId);\r\n    if (!cart || cart.items.length === 0) {\r\n      throw new Error('Cart is empty');\r\n    }\r\n    \r\n    const order = dbHelpers.createOrder({\r\n      userId,\r\n      items: cart.items,\r\n      total: cart.total,\r\n      ...orderData\r\n    });\r\n    \r\n    // Clear cart after order creation\r\n    dbHelpers.updateCart(userId, []);\r\n    \r\n    return order;\r\n  },\r\n\r\n  // Get user orders\r\n  getUserOrders: async (userId) => {\r\n    await delay(600);\r\n    return dbHelpers.getUserOrders(userId);\r\n  },\r\n\r\n  // Get order by ID\r\n  getOrderById: async (orderId) => {\r\n    await delay(400);\r\n    const order = dbHelpers.getOrderById(orderId); // Assuming getOrderById is available in dbHelpers\r\n    if (!order) {\r\n      throw new Error('Order not found');\r\n    }\r\n    return order;\r\n  }\r\n};\r\n\r\n// Recipes API\r\nexport const recipesAPI = {\r\n  // Get all recipes\r\n  getAll: async () => {\r\n    await delay(500);\r\n    return dbHelpers.getAllRecipes();\r\n  },\r\n\r\n  // Get recipe by ID\r\n  getById: async (id) => {\r\n    await delay(400);\r\n    const recipe = dbHelpers.getRecipeById(id);\r\n    if (!recipe) {\r\n      throw new Error('Recipe not found');\r\n    }\r\n    return recipe;\r\n  },\r\n\r\n  // Get recipes by diet\r\n  getByDiet: async (diet) => {\r\n    await delay(400);\r\n    return dbHelpers.getRecipesByDiet(diet);\r\n  },\r\n\r\n  // Get recipes by ingredients (pantry sync)\r\n  getByIngredients: async (ingredients) => {\r\n    await delay(800);\r\n    \r\n    // This would be a complex algorithm in a real app\r\n    // For now, we'll return recipes that use some of the ingredients\r\n    const allRecipes = dbHelpers.getAllRecipes();\r\n    const matchingRecipes = allRecipes.filter(recipe => {\r\n      const recipeIngredients = recipe.ingredients.map(ing => ing.name.toLowerCase());\r\n      const userIngredients = ingredients.map(ing => ing.toLowerCase());\r\n      return recipeIngredients.some(recipeIng => \r\n        userIngredients.some(userIng => userIng.includes(recipeIng) || recipeIng.includes(userIng))\r\n      );\r\n    });\r\n    \r\n    return matchingRecipes;\r\n  }\r\n};\r\n\r\n// Partnerships API\r\nexport const partnershipsAPI = {\r\n  // Get all partnerships\r\n  getAll: async () => {\r\n    await delay(500);\r\n    return dbHelpers.getAllPartnerships();\r\n  },\r\n\r\n  // Get partnership by ID\r\n  getById: async (id) => {\r\n    await delay(400);\r\n    const partnership = dbHelpers.getPartnershipById(id);\r\n    if (!partnership) {\r\n      throw new Error('Partnership not found');\r\n    }\r\n    return partnership;\r\n  }\r\n};\r\n\r\n// User Progress API\r\nexport const progressAPI = {\r\n  // Get user progress\r\n  getUserProgress: async (userId) => {\r\n    await delay(600);\r\n    \r\n    // In a real app, this would fetch from database\r\n    // For now, return mock data\r\n    return {\r\n      currentDietPlan: \"keto\",\r\n      startDate: \"2024-01-15T00:00:00Z\",\r\n      currentWeight: 75,\r\n      targetWeight: 70,\r\n      measurements: {\r\n        waist: 32,\r\n        chest: 42,\r\n        arms: 14\r\n      },\r\n      progressPhotos: [],\r\n      notes: \"Feeling great on keto, energy levels are high\"\r\n    };\r\n  },\r\n\r\n  // Update user progress\r\n  updateProgress: async (userId, progressData) => {\r\n    await delay(800);\r\n    \r\n    // In a real app, this would update the database\r\n    return {\r\n      success: true,\r\n      message: \"Progress updated successfully\",\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n  }\r\n};\r\n\r\n// Dashboard API\r\nexport const dashboardAPI = {\r\n  // Get dashboard data\r\n  getDashboardData: async (userId) => {\r\n    await delay(1000);\r\n    \r\n    const user = await authAPI.getUser(userId);\r\n    const cart = await cartAPI.getCart(userId);\r\n    const orders = await ordersAPI.getUserOrders(userId);\r\n    const progress = await progressAPI.getUserProgress(userId);\r\n    \r\n    return {\r\n      user,\r\n      cart,\r\n      recentOrders: orders.slice(0, 3),\r\n      progress,\r\n      recommendations: {\r\n        products: dbHelpers.getAllProducts().slice(0, 4),\r\n        recipes: dbHelpers.getAllRecipes().slice(0, 3)\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n// Export all APIs\r\nexport default {\r\n  auth: authAPI,\r\n  dietPlans: dietPlansAPI,\r\n  products: productsAPI,\r\n  cart: cartAPI,\r\n  orders: ordersAPI,\r\n  recipes: recipesAPI,\r\n  partnerships: partnershipsAPI,\r\n  progress: progressAPI,\r\n  dashboard: dashboardAPI\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}