{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users data\\\\Rachit\\\\NutriCart Project\\\\nutriCart\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check for existing token on app load\n  useEffect(() => {\n    const storedToken = localStorage.getItem('nutriCart_token');\n    const storedUser = localStorage.getItem('nutriCart_user');\n    if (storedToken && storedUser) {\n      try {\n        const userData = JSON.parse(storedUser);\n        setToken(storedToken);\n        setUser(userData);\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Error parsing stored user data:', error);\n        localStorage.removeItem('nutriCart_token');\n        localStorage.removeItem('nutriCart_user');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const response = await authAPI.login(email, password);\n      const {\n        user: userData,\n        token: authToken\n      } = response;\n\n      // Store in localStorage\n      localStorage.setItem('nutriCart_token', authToken);\n      localStorage.setItem('nutriCart_user', JSON.stringify(userData));\n\n      // Update state\n      setToken(authToken);\n      setUser(userData);\n      setIsAuthenticated(true);\n      return {\n        success: true,\n        user: userData\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signup = async userData => {\n    try {\n      setLoading(true);\n      const response = await authAPI.register(userData);\n      const {\n        user: newUser,\n        token: authToken\n      } = response;\n\n      // Store in localStorage\n      localStorage.setItem('nutriCart_token', authToken);\n      localStorage.setItem('nutriCart_user', JSON.stringify(newUser));\n\n      // Update state\n      setToken(authToken);\n      setUser(newUser);\n      setIsAuthenticated(true);\n      return {\n        success: true,\n        user: newUser\n      };\n    } catch (error) {\n      console.error('Signup error:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateProfile = async profileData => {\n    try {\n      setLoading(true);\n      const updatedUser = await authAPI.updateProfile(user.id, profileData);\n\n      // Update stored user data\n      const newUserData = {\n        ...user,\n        ...updatedUser\n      };\n      localStorage.setItem('nutriCart_user', JSON.stringify(newUserData));\n\n      // Update state\n      setUser(newUserData);\n      return {\n        success: true,\n        user: newUserData\n      };\n    } catch (error) {\n      console.error('Profile update error:', error);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    // Clear localStorage\n    localStorage.removeItem('nutriCart_token');\n    localStorage.removeItem('nutriCart_user');\n\n    // Clear state\n    setToken(null);\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const refreshUser = async () => {\n    if (!(user !== null && user !== void 0 && user.id)) return;\n    try {\n      const userData = await authAPI.getUser(user.id);\n      const newUserData = {\n        ...user,\n        ...userData\n      };\n      localStorage.setItem('nutriCart_user', JSON.stringify(newUserData));\n      setUser(newUserData);\n    } catch (error) {\n      console.error('Error refreshing user data:', error);\n      // If refresh fails, logout user\n      logout();\n    }\n  };\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    loading,\n    login,\n    signup,\n    logout,\n    updateProfile,\n    refreshUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"Ly4Z9Py1dRelWLHKuS1IdwB0JmI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","isAuthenticated","setIsAuthenticated","loading","setLoading","storedToken","localStorage","getItem","storedUser","userData","JSON","parse","error","console","removeItem","login","email","password","response","authToken","setItem","stringify","success","signup","register","newUser","updateProfile","profileData","updatedUser","id","newUserData","logout","refreshUser","getUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users data/Rachit/NutriCart Project/nutriCart/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { authAPI } from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Check for existing token on app load\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('nutriCart_token');\r\n    const storedUser = localStorage.getItem('nutriCart_user');\r\n    \r\n    if (storedToken && storedUser) {\r\n      try {\r\n        const userData = JSON.parse(storedUser);\r\n        setToken(storedToken);\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n      } catch (error) {\r\n        console.error('Error parsing stored user data:', error);\r\n        localStorage.removeItem('nutriCart_token');\r\n        localStorage.removeItem('nutriCart_user');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await authAPI.login(email, password);\r\n      \r\n      const { user: userData, token: authToken } = response;\r\n      \r\n      // Store in localStorage\r\n      localStorage.setItem('nutriCart_token', authToken);\r\n      localStorage.setItem('nutriCart_user', JSON.stringify(userData));\r\n      \r\n      // Update state\r\n      setToken(authToken);\r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n      \r\n      return { success: true, user: userData };\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const signup = async (userData) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await authAPI.register(userData);\r\n      \r\n      const { user: newUser, token: authToken } = response;\r\n      \r\n      // Store in localStorage\r\n      localStorage.setItem('nutriCart_token', authToken);\r\n      localStorage.setItem('nutriCart_user', JSON.stringify(newUser));\r\n      \r\n      // Update state\r\n      setToken(authToken);\r\n      setUser(newUser);\r\n      setIsAuthenticated(true);\r\n      \r\n      return { success: true, user: newUser };\r\n    } catch (error) {\r\n      console.error('Signup error:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (profileData) => {\r\n    try {\r\n      setLoading(true);\r\n      const updatedUser = await authAPI.updateProfile(user.id, profileData);\r\n      \r\n      // Update stored user data\r\n      const newUserData = { ...user, ...updatedUser };\r\n      localStorage.setItem('nutriCart_user', JSON.stringify(newUserData));\r\n      \r\n      // Update state\r\n      setUser(newUserData);\r\n      \r\n      return { success: true, user: newUserData };\r\n    } catch (error) {\r\n      console.error('Profile update error:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    // Clear localStorage\r\n    localStorage.removeItem('nutriCart_token');\r\n    localStorage.removeItem('nutriCart_user');\r\n    \r\n    // Clear state\r\n    setToken(null);\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const refreshUser = async () => {\r\n    if (!user?.id) return;\r\n    \r\n    try {\r\n      const userData = await authAPI.getUser(user.id);\r\n      const newUserData = { ...user, ...userData };\r\n      \r\n      localStorage.setItem('nutriCart_user', JSON.stringify(newUserData));\r\n      setUser(newUserData);\r\n    } catch (error) {\r\n      console.error('Error refreshing user data:', error);\r\n      // If refresh fails, logout user\r\n      logout();\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    token,\r\n    isAuthenticated,\r\n    loading,\r\n    login,\r\n    signup,\r\n    logout,\r\n    updateProfile,\r\n    refreshUser\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}