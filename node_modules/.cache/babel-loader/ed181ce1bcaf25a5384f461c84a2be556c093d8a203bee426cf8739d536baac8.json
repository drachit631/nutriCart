{"ast":null,"code":"import _objectSpread from\"C:/Users data/Rachit/NutriCart Project/nutriCart/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// API Services for NutriCart Application (calls backend server)\nconst BASE_URL=process.env.REACT_APP_API_BASE_URL||\"http://localhost:4000/api\";async function request(path){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const res=await fetch(\"\".concat(BASE_URL).concat(path),_objectSpread({headers:_objectSpread({\"Content-Type\":\"application/json\"},options.headers||{})},options));if(!res.ok){let message=\"Request failed (\".concat(res.status,\")\");try{const err=await res.json();message=err.message||message;}catch(_){/* ignore */}throw new Error(message);}// 204 no content\nif(res.status===204)return null;return res.json();}catch(error){if(error.name===\"TypeError\"&&error.message.includes(\"fetch\")){throw new Error(\"Network error: Unable to connect to server. Please check if the backend is running.\");}throw error;}}// Authentication API\nexport const authAPI={// Login user\nlogin:async(email,password)=>{return request(\"/auth/login\",{method:\"POST\",body:JSON.stringify({email,password})});},// Register new user\nregister:async userData=>{return request(\"/auth/register\",{method:\"POST\",body:JSON.stringify(userData)});},// Update user profile\nupdateProfile:async(userId,profileData)=>{if(!userId){throw new Error(\"User ID is required\");}return request(\"/users/\".concat(userId),{method:\"PATCH\",body:JSON.stringify(profileData)});},// Get user by ID\ngetUser:async userId=>{if(!userId){throw new Error(\"User ID is required\");}return request(\"/users/\".concat(userId));}};// Diet Plans API\nexport const dietPlansAPI={// Get all diet plans\ngetAll:async()=>{return request(\"/diet-plans\");},// Get diet plan by ID\ngetById:async id=>{return request(\"/diet-plans/\".concat(id));},// Get diet plans by tags\ngetByTags:async tags=>{// optional backend route could be added; for now filter client-side\nconst all=await request(\"/diet-plans\");return all.filter(p=>(p.suitableFor||[]).some(t=>tags.includes(t)));},// Start a diet plan for user\nstartPlan:async(userId,dietPlanId)=>{// placeholder success\nreturn{success:true,message:\"Started \".concat(dietPlanId),startDate:new Date().toISOString()};}};// Products API\nexport const productsAPI={// Get all products\ngetAll:async()=>{return request(\"/products\");},// Get product by ID\ngetById:async id=>{return request(\"/products/\".concat(id));},// Get products by category\ngetByCategory:async category=>{const all=await request(\"/products\");return all.filter(p=>p.category===category);},// Get products by diet\ngetByDiet:async diet=>{const all=await request(\"/products\");return all.filter(p=>(p.dietCompatible||[]).includes(diet));},// Search products\nsearch:async query=>{const all=await request(\"/products\");return all.filter(product=>product.name.toLowerCase().includes(query.toLowerCase())||product.description.toLowerCase().includes(query.toLowerCase()));},// Get product categories\ngetCategories:async()=>{return request(\"/categories\");}};// Cart API\nexport const cartAPI={// Get user cart\ngetCart:async userId=>{if(!userId){throw new Error(\"User ID is required\");}return request(\"/users/\".concat(userId,\"/cart\"));},// Add item to cart\naddItem:async function(userId,productId){let quantity=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;if(!userId){throw new Error(\"User ID is required\");}if(!productId){throw new Error(\"Product ID is required\");}return request(\"/users/\".concat(userId,\"/cart/items\"),{method:\"POST\",body:JSON.stringify({productId,quantity})});},// Update item quantity\nupdateQuantity:async(userId,productId,quantity)=>{if(!userId){throw new Error(\"User ID is required\");}if(!productId){throw new Error(\"Product ID is required\");}return request(\"/users/\".concat(userId,\"/cart/items/\").concat(productId),{method:\"PATCH\",body:JSON.stringify({quantity})});},// Remove item from cart\nremoveItem:async(userId,productId)=>{if(!userId){throw new Error(\"User ID is required\");}if(!productId){throw new Error(\"Product ID is required\");}await request(\"/users/\".concat(userId,\"/cart/items/\").concat(productId),{method:\"DELETE\"});return request(\"/users/\".concat(userId,\"/cart\"));},// Clear cart\nclearCart:async userId=>{if(!userId){throw new Error(\"User ID is required\");}await request(\"/users/\".concat(userId,\"/cart\"),{method:\"DELETE\"});return{items:[],total:0};}};// Orders API\nexport const ordersAPI={// Create order from cart\ncreateOrder:async(userId,orderData)=>{if(!userId){throw new Error(\"User ID is required\");}return request(\"/users/\".concat(userId,\"/orders\"),{method:\"POST\",body:JSON.stringify(orderData)});},// Get user orders\ngetUserOrders:async userId=>{if(!userId){throw new Error(\"User ID is required\");}return request(\"/users/\".concat(userId,\"/orders\"));},// Get order by ID\ngetOrderById:async orderId=>{// Optional: implement endpoint in backend if needed\nthrow new Error(\"Not implemented\");}};// Recipes API\nexport const recipesAPI={// Get all recipes\ngetAll:async()=>{return request(\"/recipes\");},// Get recipe by ID\ngetById:async id=>{return request(\"/recipes/\".concat(id));},// Get recipes by diet\ngetByDiet:async diet=>{const all=await request(\"/recipes\");return all.filter(recipe=>(recipe.dietCompatible||[]).includes(diet));},// Get recipes by ingredients (pantry sync)\ngetByIngredients:async ingredients=>{const all=await request(\"/recipes\");return all.filter(recipe=>{const recipeIngredients=recipe.ingredients.map(ing=>ing.name.toLowerCase());const userIngredients=ingredients.map(ing=>ing.toLowerCase());return recipeIngredients.some(recipeIng=>userIngredients.some(userIng=>userIng.includes(recipeIng)||recipeIng.includes(userIng)));});}};// Partnerships API\nexport const partnershipsAPI={// Get all partnerships\ngetAll:async()=>{return request(\"/partnerships\");},// Get partnership by ID\ngetById:async id=>{return request(\"/partnerships/\".concat(id));}};// User Progress API\nexport const progressAPI={// Get user progress\ngetUserProgress:async userId=>{throw new Error(\"Not implemented\");},// Update user progress\nupdateProgress:async(userId,progressData)=>{throw new Error(\"Not implemented\");}};// Dashboard API\nexport const dashboardAPI={// Get dashboard data\ngetDashboardData:async userId=>{if(!userId){throw new Error(\"User ID is required\");}const user=await authAPI.getUser(userId);const cart=await cartAPI.getCart(userId);const orders=await ordersAPI.getUserOrders(userId);return{user,cart,recentOrders:orders.slice(0,3)};}};// Export all APIs\nexport default{auth:authAPI,dietPlans:dietPlansAPI,products:productsAPI,cart:cartAPI,orders:ordersAPI,recipes:recipesAPI,partnerships:partnershipsAPI,progress:progressAPI,dashboard:dashboardAPI};","map":{"version":3,"names":["BASE_URL","process","env","REACT_APP_API_BASE_URL","request","path","options","arguments","length","undefined","res","fetch","concat","_objectSpread","headers","ok","message","status","err","json","_","Error","error","name","includes","authAPI","login","email","password","method","body","JSON","stringify","register","userData","updateProfile","userId","profileData","getUser","dietPlansAPI","getAll","getById","id","getByTags","tags","all","filter","p","suitableFor","some","t","startPlan","dietPlanId","success","startDate","Date","toISOString","productsAPI","getByCategory","category","getByDiet","diet","dietCompatible","search","query","product","toLowerCase","description","getCategories","cartAPI","getCart","addItem","productId","quantity","updateQuantity","removeItem","clearCart","items","total","ordersAPI","createOrder","orderData","getUserOrders","getOrderById","orderId","recipesAPI","recipe","getByIngredients","ingredients","recipeIngredients","map","ing","userIngredients","recipeIng","userIng","partnershipsAPI","progressAPI","getUserProgress","updateProgress","progressData","dashboardAPI","getDashboardData","user","cart","orders","recentOrders","slice","auth","dietPlans","products","recipes","partnerships","progress","dashboard"],"sources":["C:/Users data/Rachit/NutriCart Project/nutriCart/src/services/api.js"],"sourcesContent":["// API Services for NutriCart Application (calls backend server)\r\nconst BASE_URL =\r\n  process.env.REACT_APP_API_BASE_URL || \"http://localhost:4000/api\";\r\n\r\nasync function request(path, options = {}) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}${path}`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        ...(options.headers || {}),\r\n      },\r\n      ...options,\r\n    });\r\n\r\n    if (!res.ok) {\r\n      let message = `Request failed (${res.status})`;\r\n      try {\r\n        const err = await res.json();\r\n        message = err.message || message;\r\n      } catch (_) {\r\n        /* ignore */\r\n      }\r\n      throw new Error(message);\r\n    }\r\n\r\n    // 204 no content\r\n    if (res.status === 204) return null;\r\n    return res.json();\r\n  } catch (error) {\r\n    if (error.name === \"TypeError\" && error.message.includes(\"fetch\")) {\r\n      throw new Error(\r\n        \"Network error: Unable to connect to server. Please check if the backend is running.\"\r\n      );\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Authentication API\r\nexport const authAPI = {\r\n  // Login user\r\n  login: async (email, password) => {\r\n    return request(\"/auth/login\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n  },\r\n\r\n  // Register new user\r\n  register: async (userData) => {\r\n    return request(\"/auth/register\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(userData),\r\n    });\r\n  },\r\n\r\n  // Update user profile\r\n  updateProfile: async (userId, profileData) => {\r\n    if (!userId) {\r\n      throw new Error(\"User ID is required\");\r\n    }\r\n    return request(`/users/${userId}`, {\r\n      method: \"PATCH\",\r\n      body: JSON.stringify(profileData),\r\n    });\r\n  },\r\n\r\n  // Get user by ID\r\n  getUser: async (userId) => {\r\n    if (!userId) {\r\n      throw new Error(\"User ID is required\");\r\n    }\r\n    return request(`/users/${userId}`);\r\n  },\r\n};\r\n\r\n// Diet Plans API\r\nexport const dietPlansAPI = {\r\n  // Get all diet plans\r\n  getAll: async () => {\r\n    return request(\"/diet-plans\");\r\n  },\r\n\r\n  // Get diet plan by ID\r\n  getById: async (id) => {\r\n    return request(`/diet-plans/${id}`);\r\n  },\r\n\r\n  // Get diet plans by tags\r\n  getByTags: async (tags) => {\r\n    // optional backend route could be added; for now filter client-side\r\n    const all = await request(\"/diet-plans\");\r\n    return all.filter((p) =>\r\n      (p.suitableFor || []).some((t) => tags.includes(t))\r\n    );\r\n  },\r\n\r\n  // Start a diet plan for user\r\n  startPlan: async (userId, dietPlanId) => {\r\n    // placeholder success\r\n    return {\r\n      success: true,\r\n      message: `Started ${dietPlanId}`,\r\n      startDate: new Date().toISOString(),\r\n    };\r\n  },\r\n};\r\n\r\n// Products API\r\nexport const productsAPI = {\r\n  // Get all products\r\n  getAll: async () => {\r\n    return request(\"/products\");\r\n  },\r\n\r\n  // Get product by ID\r\n  getById: async (id) => {\r\n    return request(`/products/${id}`);\r\n  },\r\n\r\n  // Get products by category\r\n  getByCategory: async (category) => {\r\n    const all = await request(\"/products\");\r\n    return all.filter((p) => p.category === category);\r\n  },\r\n\r\n  // Get products by diet\r\n  getByDiet: async (diet) => {\r\n    const all = await request(\"/products\");\r\n    return all.filter((p) => (p.dietCompatible || []).includes(diet));\r\n  },\r\n\r\n  // Search products\r\n  search: async (query) => {\r\n    const all = await request(\"/products\");\r\n    return all.filter(\r\n      (product) =>\r\n        product.name.toLowerCase().includes(query.toLowerCase()) ||\r\n        product.description.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n  },\r\n\r\n  // Get product categories\r\n  getCategories: async () => {\r\n    return request(\"/categories\");\r\n  },\r\n};\r\n\r\n// Cart API\r\nexport const cartAPI = {\r\n  // Get user cart\r\n  getCart: async (userId) => {\r\n    if (!userId) {\r\n      throw new Error(\"User ID is required\");\r\n    }\r\n    return request(`/users/${userId}/cart`);\r\n  },\r\n\r\n  // Add item to cart\r\n  addItem: async (userId, productId, quantity = 1) => {\r\n    if (!userId) {\r\n      throw new Error(\"User ID is required\");\r\n    }\r\n    if (!productId) {\r\n      throw new Error(\"Product ID is required\");\r\n    }\r\n    return request(`/users/${userId}/cart/items`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ productId, quantity }),\r\n    });\r\n  },\r\n\r\n  // Update item quantity\r\n  updateQuantity: async (userId, productId, quantity) => {\r\n    if (!userId) {\r\n      throw new Error(\"User ID is required\");\r\n    }\r\n    if (!productId) {\r\n      throw new Error(\"Product ID is required\");\r\n    }\r\n    return request(`/users/${userId}/cart/items/${productId}`, {\r\n      method: \"PATCH\",\r\n      body: JSON.stringify({ quantity }),\r\n    });\r\n  },\r\n\r\n  // Remove item from cart\r\n  removeItem: async (userId, productId) => {\r\n    if (!userId) {\r\n      throw new Error(\"User ID is required\");\r\n    }\r\n    if (!productId) {\r\n      throw new Error(\"Product ID is required\");\r\n    }\r\n    await request(`/users/${userId}/cart/items/${productId}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    return request(`/users/${userId}/cart`);\r\n  },\r\n\r\n  // Clear cart\r\n  clearCart: async (userId) => {\r\n    if (!userId) {\r\n      throw new Error(\"User ID is required\");\r\n    }\r\n    await request(`/users/${userId}/cart`, { method: \"DELETE\" });\r\n    return { items: [], total: 0 };\r\n  },\r\n};\r\n\r\n// Orders API\r\nexport const ordersAPI = {\r\n  // Create order from cart\r\n  createOrder: async (userId, orderData) => {\r\n    if (!userId) {\r\n      throw new Error(\"User ID is required\");\r\n    }\r\n    return request(`/users/${userId}/orders`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(orderData),\r\n    });\r\n  },\r\n\r\n  // Get user orders\r\n  getUserOrders: async (userId) => {\r\n    if (!userId) {\r\n      throw new Error(\"User ID is required\");\r\n    }\r\n    return request(`/users/${userId}/orders`);\r\n  },\r\n\r\n  // Get order by ID\r\n  getOrderById: async (orderId) => {\r\n    // Optional: implement endpoint in backend if needed\r\n    throw new Error(\"Not implemented\");\r\n  },\r\n};\r\n\r\n// Recipes API\r\nexport const recipesAPI = {\r\n  // Get all recipes\r\n  getAll: async () => {\r\n    return request(\"/recipes\");\r\n  },\r\n\r\n  // Get recipe by ID\r\n  getById: async (id) => {\r\n    return request(`/recipes/${id}`);\r\n  },\r\n\r\n  // Get recipes by diet\r\n  getByDiet: async (diet) => {\r\n    const all = await request(\"/recipes\");\r\n    return all.filter((recipe) => (recipe.dietCompatible || []).includes(diet));\r\n  },\r\n\r\n  // Get recipes by ingredients (pantry sync)\r\n  getByIngredients: async (ingredients) => {\r\n    const all = await request(\"/recipes\");\r\n    return all.filter((recipe) => {\r\n      const recipeIngredients = recipe.ingredients.map((ing) =>\r\n        ing.name.toLowerCase()\r\n      );\r\n      const userIngredients = ingredients.map((ing) => ing.toLowerCase());\r\n      return recipeIngredients.some((recipeIng) =>\r\n        userIngredients.some(\r\n          (userIng) =>\r\n            userIng.includes(recipeIng) || recipeIng.includes(userIng)\r\n        )\r\n      );\r\n    });\r\n  },\r\n};\r\n\r\n// Partnerships API\r\nexport const partnershipsAPI = {\r\n  // Get all partnerships\r\n  getAll: async () => {\r\n    return request(\"/partnerships\");\r\n  },\r\n\r\n  // Get partnership by ID\r\n  getById: async (id) => {\r\n    return request(`/partnerships/${id}`);\r\n  },\r\n};\r\n\r\n// User Progress API\r\nexport const progressAPI = {\r\n  // Get user progress\r\n  getUserProgress: async (userId) => {\r\n    throw new Error(\"Not implemented\");\r\n  },\r\n\r\n  // Update user progress\r\n  updateProgress: async (userId, progressData) => {\r\n    throw new Error(\"Not implemented\");\r\n  },\r\n};\r\n\r\n// Dashboard API\r\nexport const dashboardAPI = {\r\n  // Get dashboard data\r\n  getDashboardData: async (userId) => {\r\n    if (!userId) {\r\n      throw new Error(\"User ID is required\");\r\n    }\r\n    const user = await authAPI.getUser(userId);\r\n    const cart = await cartAPI.getCart(userId);\r\n    const orders = await ordersAPI.getUserOrders(userId);\r\n    return { user, cart, recentOrders: orders.slice(0, 3) };\r\n  },\r\n};\r\n\r\n// Export all APIs\r\nexport default {\r\n  auth: authAPI,\r\n  dietPlans: dietPlansAPI,\r\n  products: productsAPI,\r\n  cart: cartAPI,\r\n  orders: ordersAPI,\r\n  recipes: recipesAPI,\r\n  partnerships: partnershipsAPI,\r\n  progress: progressAPI,\r\n  dashboard: dashboardAPI,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}