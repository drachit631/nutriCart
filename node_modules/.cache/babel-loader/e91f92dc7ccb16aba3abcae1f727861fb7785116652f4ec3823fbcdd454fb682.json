{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users data\\\\Rachit\\\\NutriCart Project\\\\nutriCart\\\\src\\\\contexts\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useAuth } from \"./AuthContext\";\nimport { cartAPI } from \"../services/api\";\nimport { toast } from \"../components/ui/use-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const useCart = () => {\n  _s();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n};\n_s(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  const [cart, setCart] = useState({\n    items: [],\n    total: 0,\n    count: 0\n  });\n  const [loading, setLoading] = useState(false);\n  const [updatingItems, setUpdatingItems] = useState(new Set()); // Track which items are being updated\n\n  // Load cart from API when user is authenticated\n  useEffect(() => {\n    if (isAuthenticated && user !== null && user !== void 0 && user.id) {\n      // Check if there are local cart items to sync\n      const localCart = localStorage.getItem(\"nutriCart_localCart\");\n      if (localCart) {\n        const parsedLocalCart = JSON.parse(localCart);\n        if (parsedLocalCart.items.length > 0) {\n          // Sync local cart with backend\n          syncLocalCartWithBackend(parsedLocalCart.items);\n        } else {\n          loadCart();\n        }\n      } else {\n        loadCart();\n      }\n    } else {\n      // Load local cart when user is not authenticated\n      loadLocalCart();\n    }\n  }, [isAuthenticated, user === null || user === void 0 ? void 0 : user.id]);\n\n  // Sync local cart items with backend when user logs in\n  const syncLocalCartWithBackend = async localItems => {\n    try {\n      setLoading(true);\n\n      // Add each local item to the backend cart\n      for (const item of localItems) {\n        await cartAPI.addItem(user.id, item.productId, item.quantity);\n      }\n\n      // Load the updated cart from backend\n      await loadCart();\n\n      // Clear local cart\n      localStorage.removeItem(\"nutriCart_localCart\");\n      toast({\n        title: \"Cart Synced\",\n        description: \"Your local cart items have been synced with your account!\",\n        variant: \"default\"\n      });\n    } catch (error) {\n      console.error(\"Error syncing local cart:\", error);\n      // If sync fails, still load the backend cart\n      await loadCart();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load cart from localStorage for non-authenticated users\n  const loadLocalCart = () => {\n    try {\n      const localCart = localStorage.getItem(\"nutriCart_localCart\");\n      if (localCart) {\n        const parsedCart = JSON.parse(localCart);\n        setCart(parsedCart);\n      }\n    } catch (error) {\n      console.error(\"Error loading local cart:\", error);\n    }\n  };\n\n  // Save cart to localStorage for non-authenticated users\n  const saveLocalCart = cartData => {\n    try {\n      localStorage.setItem(\"nutriCart_localCart\", JSON.stringify(cartData));\n    } catch (error) {\n      console.error(\"Error saving local cart:\", error);\n    }\n  };\n  const loadCart = async () => {\n    try {\n      setLoading(true);\n      const cartData = await cartAPI.getCart(user.id);\n      setCart({\n        ...cartData,\n        count: cartData.items.reduce((sum, item) => sum + item.quantity, 0)\n      });\n    } catch (error) {\n      console.error(\"Error loading cart:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load cart. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addToCart = async (productId, quantity = 1) => {\n    if (isAuthenticated && user !== null && user !== void 0 && user.id) {\n      // User is authenticated, add to backend\n      try {\n        setUpdatingItems(prev => new Set(prev).add(productId));\n        const cartData = await cartAPI.addItem(user.id, productId, quantity);\n        setCart({\n          ...cartData,\n          count: cartData.items.reduce((sum, item) => sum + item.quantity, 0)\n        });\n        toast({\n          title: \"Added to Cart\",\n          description: \"Item has been added to your cart successfully!\",\n          variant: \"default\"\n        });\n      } catch (error) {\n        console.error(\"Error adding to cart:\", error);\n        toast({\n          title: \"Error\",\n          description: error.message || \"Failed to add item to cart. Please try again.\",\n          variant: \"destructive\"\n        });\n      } finally {\n        setUpdatingItems(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(productId);\n          return newSet;\n        });\n      }\n    } else {\n      // User is not authenticated, add to local cart\n      const existingItem = cart.items.find(item => item.productId === productId);\n      let newCart;\n      if (existingItem) {\n        newCart = {\n          ...cart,\n          items: cart.items.map(item => item.productId === productId ? {\n            ...item,\n            quantity: item.quantity + quantity\n          } : item)\n        };\n      } else {\n        newCart = {\n          ...cart,\n          items: [...cart.items, {\n            productId,\n            quantity,\n            price: 0\n          }] // Price will be loaded later\n        };\n      }\n      newCart.count = newCart.items.reduce((sum, item) => sum + item.quantity, 0);\n      newCart.total = newCart.items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n      setCart(newCart);\n      saveLocalCart(newCart);\n      toast({\n        title: \"Added to Cart\",\n        description: \"Item has been added to your local cart!\",\n        variant: \"default\"\n      });\n    }\n  };\n  const updateQuantity = async (productId, quantity) => {\n    if (isAuthenticated && user !== null && user !== void 0 && user.id) {\n      // User is authenticated, update in backend\n      try {\n        setUpdatingItems(prev => new Set(prev).add(productId));\n        const cartData = await cartAPI.updateQuantity(user.id, productId, quantity);\n        setCart({\n          ...cartData,\n          count: cartData.items.reduce((sum, item) => sum + item.quantity, 0)\n        });\n        if (quantity > 0) {\n          toast({\n            title: \"Cart Updated\",\n            description: \"Cart quantity has been updated successfully!\",\n            variant: \"default\"\n          });\n        }\n      } catch (error) {\n        console.error(\"Error updating cart:\", error);\n        toast({\n          title: \"Error\",\n          description: error.message || \"Failed to update cart. Please try again.\",\n          variant: \"destructive\"\n        });\n      } finally {\n        setUpdatingItems(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(productId);\n          return newSet;\n        });\n      }\n    } else {\n      // User is not authenticated, update local cart\n      const newCart = {\n        ...cart,\n        items: cart.items.map(item => item.productId === productId ? {\n          ...item,\n          quantity: Math.max(0, quantity)\n        } : item).filter(item => item.quantity > 0)\n      };\n      newCart.count = newCart.items.reduce((sum, item) => sum + item.quantity, 0);\n      newCart.total = newCart.items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n      setCart(newCart);\n      saveLocalCart(newCart);\n    }\n  };\n  const removeFromCart = async productId => {\n    if (isAuthenticated && user !== null && user !== void 0 && user.id) {\n      // User is authenticated, remove from backend\n      try {\n        setUpdatingItems(prev => new Set(prev).add(productId));\n        const cartData = await cartAPI.removeItem(user.id, productId);\n        setCart({\n          ...cartData,\n          count: cartData.items.reduce((sum, item) => sum + item.quantity, 0)\n        });\n        toast({\n          title: \"Removed from Cart\",\n          description: \"Item has been removed from your cart.\",\n          variant: \"default\"\n        });\n      } catch (error) {\n        console.error(\"Error removing from cart:\", error);\n        toast({\n          title: \"Error\",\n          description: error.message || \"Failed to remove item from cart. Please try again.\",\n          variant: \"destructive\"\n        });\n      } finally {\n        setUpdatingItems(prev => {\n          const newSet = new Set(prev);\n          newSet.delete(productId);\n          return newSet;\n        });\n      }\n    } else {\n      // User is not authenticated, remove from local cart\n      const newCart = {\n        ...cart,\n        items: cart.items.filter(item => item.productId !== productId)\n      };\n      newCart.count = newCart.items.reduce((sum, item) => sum + item.quantity, 0);\n      newCart.total = newCart.items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n      setCart(newCart);\n      saveLocalCart(newCart);\n    }\n  };\n  const clearCart = async () => {\n    if (isAuthenticated && user !== null && user !== void 0 && user.id) {\n      // User is authenticated, clear from backend\n      try {\n        setLoading(true);\n        await cartAPI.clearCart(user.id);\n        setCart({\n          items: [],\n          total: 0,\n          count: 0\n        });\n        toast({\n          title: \"Cart Cleared\",\n          description: \"Your cart has been cleared successfully.\",\n          variant: \"default\"\n        });\n      } catch (error) {\n        console.error(\"Error clearing cart:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to clear cart. Please try again.\",\n          variant: \"destructive\"\n        });\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      // User is not authenticated, clear local cart\n      setCart({\n        items: [],\n        total: 0,\n        count: 0\n      });\n      localStorage.removeItem(\"nutriCart_localCart\");\n      toast({\n        title: \"Cart Cleared\",\n        description: \"Your local cart has been cleared.\",\n        variant: \"default\"\n      });\n    }\n  };\n  const getItemQuantity = productId => {\n    const item = cart.items.find(item => item.productId === productId);\n    return item ? item.quantity : 0;\n  };\n  const isInCart = productId => {\n    return cart.items.some(item => item.productId === productId);\n  };\n  const isItemUpdating = productId => {\n    return updatingItems.has(productId);\n  };\n  const value = {\n    cart,\n    loading,\n    addToCart,\n    updateQuantity,\n    removeFromCart,\n    clearCart,\n    getItemQuantity,\n    isInCart,\n    loadCart,\n    isItemUpdating\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 376,\n    columnNumber: 10\n  }, this);\n};\n_s2(CartProvider, \"4xxjS2+wPSPS6IMs7UNcYcc8JgA=\", false, function () {\n  return [useAuth];\n});\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","cartAPI","toast","jsxDEV","_jsxDEV","CartContext","useCart","_s","context","Error","CartProvider","children","_s2","user","isAuthenticated","cart","setCart","items","total","count","loading","setLoading","updatingItems","setUpdatingItems","Set","id","localCart","localStorage","getItem","parsedLocalCart","JSON","parse","length","syncLocalCartWithBackend","loadCart","loadLocalCart","localItems","item","addItem","productId","quantity","removeItem","title","description","variant","error","console","parsedCart","saveLocalCart","cartData","setItem","stringify","getCart","reduce","sum","addToCart","prev","add","message","newSet","delete","existingItem","find","newCart","map","price","updateQuantity","Math","max","filter","removeFromCart","clearCart","getItemQuantity","isInCart","some","isItemUpdating","has","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users data/Rachit/NutriCart Project/nutriCart/src/contexts/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useAuth } from \"./AuthContext\";\nimport { cartAPI } from \"../services/api\";\nimport { toast } from \"../components/ui/use-toast\";\n\nconst CartContext = createContext();\n\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n};\n\nexport const CartProvider = ({ children }) => {\n  const { user, isAuthenticated } = useAuth();\n  const [cart, setCart] = useState({ items: [], total: 0, count: 0 });\n  const [loading, setLoading] = useState(false);\n  const [updatingItems, setUpdatingItems] = useState(new Set()); // Track which items are being updated\n\n  // Load cart from API when user is authenticated\n  useEffect(() => {\n    if (isAuthenticated && user?.id) {\n      // Check if there are local cart items to sync\n      const localCart = localStorage.getItem(\"nutriCart_localCart\");\n      if (localCart) {\n        const parsedLocalCart = JSON.parse(localCart);\n        if (parsedLocalCart.items.length > 0) {\n          // Sync local cart with backend\n          syncLocalCartWithBackend(parsedLocalCart.items);\n        } else {\n          loadCart();\n        }\n      } else {\n        loadCart();\n      }\n    } else {\n      // Load local cart when user is not authenticated\n      loadLocalCart();\n    }\n  }, [isAuthenticated, user?.id]);\n\n  // Sync local cart items with backend when user logs in\n  const syncLocalCartWithBackend = async (localItems) => {\n    try {\n      setLoading(true);\n\n      // Add each local item to the backend cart\n      for (const item of localItems) {\n        await cartAPI.addItem(user.id, item.productId, item.quantity);\n      }\n\n      // Load the updated cart from backend\n      await loadCart();\n\n      // Clear local cart\n      localStorage.removeItem(\"nutriCart_localCart\");\n\n      toast({\n        title: \"Cart Synced\",\n        description:\n          \"Your local cart items have been synced with your account!\",\n        variant: \"default\",\n      });\n    } catch (error) {\n      console.error(\"Error syncing local cart:\", error);\n      // If sync fails, still load the backend cart\n      await loadCart();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load cart from localStorage for non-authenticated users\n  const loadLocalCart = () => {\n    try {\n      const localCart = localStorage.getItem(\"nutriCart_localCart\");\n      if (localCart) {\n        const parsedCart = JSON.parse(localCart);\n        setCart(parsedCart);\n      }\n    } catch (error) {\n      console.error(\"Error loading local cart:\", error);\n    }\n  };\n\n  // Save cart to localStorage for non-authenticated users\n  const saveLocalCart = (cartData) => {\n    try {\n      localStorage.setItem(\"nutriCart_localCart\", JSON.stringify(cartData));\n    } catch (error) {\n      console.error(\"Error saving local cart:\", error);\n    }\n  };\n\n  const loadCart = async () => {\n    try {\n      setLoading(true);\n      const cartData = await cartAPI.getCart(user.id);\n      setCart({\n        ...cartData,\n        count: cartData.items.reduce((sum, item) => sum + item.quantity, 0),\n      });\n    } catch (error) {\n      console.error(\"Error loading cart:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load cart. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addToCart = async (productId, quantity = 1) => {\n    if (isAuthenticated && user?.id) {\n      // User is authenticated, add to backend\n      try {\n        setUpdatingItems((prev) => new Set(prev).add(productId));\n\n        const cartData = await cartAPI.addItem(user.id, productId, quantity);\n\n        setCart({\n          ...cartData,\n          count: cartData.items.reduce((sum, item) => sum + item.quantity, 0),\n        });\n\n        toast({\n          title: \"Added to Cart\",\n          description: \"Item has been added to your cart successfully!\",\n          variant: \"default\",\n        });\n      } catch (error) {\n        console.error(\"Error adding to cart:\", error);\n        toast({\n          title: \"Error\",\n          description:\n            error.message || \"Failed to add item to cart. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setUpdatingItems((prev) => {\n          const newSet = new Set(prev);\n          newSet.delete(productId);\n          return newSet;\n        });\n      }\n    } else {\n      // User is not authenticated, add to local cart\n      const existingItem = cart.items.find(\n        (item) => item.productId === productId\n      );\n      let newCart;\n\n      if (existingItem) {\n        newCart = {\n          ...cart,\n          items: cart.items.map((item) =>\n            item.productId === productId\n              ? { ...item, quantity: item.quantity + quantity }\n              : item\n          ),\n        };\n      } else {\n        newCart = {\n          ...cart,\n          items: [...cart.items, { productId, quantity, price: 0 }], // Price will be loaded later\n        };\n      }\n\n      newCart.count = newCart.items.reduce(\n        (sum, item) => sum + item.quantity,\n        0\n      );\n      newCart.total = newCart.items.reduce(\n        (sum, item) => sum + item.price * item.quantity,\n        0\n      );\n\n      setCart(newCart);\n      saveLocalCart(newCart);\n\n      toast({\n        title: \"Added to Cart\",\n        description: \"Item has been added to your local cart!\",\n        variant: \"default\",\n      });\n    }\n  };\n\n  const updateQuantity = async (productId, quantity) => {\n    if (isAuthenticated && user?.id) {\n      // User is authenticated, update in backend\n      try {\n        setUpdatingItems((prev) => new Set(prev).add(productId));\n\n        const cartData = await cartAPI.updateQuantity(\n          user.id,\n          productId,\n          quantity\n        );\n\n        setCart({\n          ...cartData,\n          count: cartData.items.reduce((sum, item) => sum + item.quantity, 0),\n        });\n\n        if (quantity > 0) {\n          toast({\n            title: \"Cart Updated\",\n            description: \"Cart quantity has been updated successfully!\",\n            variant: \"default\",\n          });\n        }\n      } catch (error) {\n        console.error(\"Error updating cart:\", error);\n        toast({\n          title: \"Error\",\n          description:\n            error.message || \"Failed to update cart. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setUpdatingItems((prev) => {\n          const newSet = new Set(prev);\n          newSet.delete(productId);\n          return newSet;\n        });\n      }\n    } else {\n      // User is not authenticated, update local cart\n      const newCart = {\n        ...cart,\n        items: cart.items\n          .map((item) =>\n            item.productId === productId\n              ? { ...item, quantity: Math.max(0, quantity) }\n              : item\n          )\n          .filter((item) => item.quantity > 0),\n      };\n\n      newCart.count = newCart.items.reduce(\n        (sum, item) => sum + item.quantity,\n        0\n      );\n      newCart.total = newCart.items.reduce(\n        (sum, item) => sum + item.price * item.quantity,\n        0\n      );\n\n      setCart(newCart);\n      saveLocalCart(newCart);\n    }\n  };\n\n  const removeFromCart = async (productId) => {\n    if (isAuthenticated && user?.id) {\n      // User is authenticated, remove from backend\n      try {\n        setUpdatingItems((prev) => new Set(prev).add(productId));\n\n        const cartData = await cartAPI.removeItem(user.id, productId);\n\n        setCart({\n          ...cartData,\n          count: cartData.items.reduce((sum, item) => sum + item.quantity, 0),\n        });\n\n        toast({\n          title: \"Removed from Cart\",\n          description: \"Item has been removed from your cart.\",\n          variant: \"default\",\n        });\n      } catch (error) {\n        console.error(\"Error removing from cart:\", error);\n        toast({\n          title: \"Error\",\n          description:\n            error.message ||\n            \"Failed to remove item from cart. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setUpdatingItems((prev) => {\n          const newSet = new Set(prev);\n          newSet.delete(productId);\n          return newSet;\n        });\n      }\n    } else {\n      // User is not authenticated, remove from local cart\n      const newCart = {\n        ...cart,\n        items: cart.items.filter((item) => item.productId !== productId),\n      };\n\n      newCart.count = newCart.items.reduce(\n        (sum, item) => sum + item.quantity,\n        0\n      );\n      newCart.total = newCart.items.reduce(\n        (sum, item) => sum + item.price * item.quantity,\n        0\n      );\n\n      setCart(newCart);\n      saveLocalCart(newCart);\n    }\n  };\n\n  const clearCart = async () => {\n    if (isAuthenticated && user?.id) {\n      // User is authenticated, clear from backend\n      try {\n        setLoading(true);\n        await cartAPI.clearCart(user.id);\n        setCart({ items: [], total: 0, count: 0 });\n\n        toast({\n          title: \"Cart Cleared\",\n          description: \"Your cart has been cleared successfully.\",\n          variant: \"default\",\n        });\n      } catch (error) {\n        console.error(\"Error clearing cart:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to clear cart. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      // User is not authenticated, clear local cart\n      setCart({ items: [], total: 0, count: 0 });\n      localStorage.removeItem(\"nutriCart_localCart\");\n\n      toast({\n        title: \"Cart Cleared\",\n        description: \"Your local cart has been cleared.\",\n        variant: \"default\",\n      });\n    }\n  };\n\n  const getItemQuantity = (productId) => {\n    const item = cart.items.find((item) => item.productId === productId);\n    return item ? item.quantity : 0;\n  };\n\n  const isInCart = (productId) => {\n    return cart.items.some((item) => item.productId === productId);\n  };\n\n  const isItemUpdating = (productId) => {\n    return updatingItems.has(productId);\n  };\n\n  const value = {\n    cart,\n    loading,\n    addToCart,\n    updateQuantity,\n    removeFromCart,\n    clearCart,\n    getItemQuantity,\n    isInCart,\n    loadCart,\n    isItemUpdating,\n  };\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}