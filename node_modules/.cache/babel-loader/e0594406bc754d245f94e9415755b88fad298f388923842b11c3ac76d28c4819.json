{"ast":null,"code":"// API Services for NutriCart Application (calls backend server)\nconst BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:4000/api\";\nasync function request(path, options = {}) {\n  try {\n    const res = await fetch(`${BASE_URL}${path}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...(options.headers || {})\n      },\n      ...options\n    });\n    if (!res.ok) {\n      let message = `Request failed (${res.status})`;\n      try {\n        const err = await res.json();\n        message = err.message || message;\n      } catch (_) {\n        /* ignore */\n      }\n      throw new Error(message);\n    }\n\n    // 204 no content\n    if (res.status === 204) return null;\n    return res.json();\n  } catch (error) {\n    if (error.name === \"TypeError\" && error.message.includes(\"fetch\")) {\n      throw new Error(\"Network error: Unable to connect to server. Please check if the backend is running.\");\n    }\n    throw error;\n  }\n}\n\n// Authentication API\nexport const authAPI = {\n  // Login user\n  login: async (email, password) => {\n    return request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n  },\n  // Register new user\n  register: async userData => {\n    return request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  },\n  // Update user profile\n  updateProfile: async (userId, profileData) => {\n    if (!userId) {\n      throw new Error('User ID is required');\n    }\n    return request(`/users/${userId}`, {\n      method: 'PATCH',\n      body: JSON.stringify(profileData)\n    });\n  },\n  // Get user by ID\n  getUser: async userId => {\n    if (!userId) {\n      throw new Error('User ID is required');\n    }\n    return request(`/users/${userId}`);\n  }\n};\n\n// Diet Plans API\nexport const dietPlansAPI = {\n  // Get all diet plans\n  getAll: async () => {\n    return request(\"/diet-plans\");\n  },\n  // Get diet plan by ID\n  getById: async id => {\n    return request(`/diet-plans/${id}`);\n  },\n  // Get diet plans by tags\n  getByTags: async tags => {\n    // optional backend route could be added; for now filter client-side\n    const all = await request(\"/diet-plans\");\n    return all.filter(p => (p.suitableFor || []).some(t => tags.includes(t)));\n  },\n  // Start a diet plan for user\n  startPlan: async (userId, dietPlanId) => {\n    // placeholder success\n    return {\n      success: true,\n      message: `Started ${dietPlanId}`,\n      startDate: new Date().toISOString()\n    };\n  }\n};\n\n// Products API\nexport const productsAPI = {\n  // Get all products\n  getAll: async () => {\n    return request(\"/products\");\n  },\n  // Get product by ID\n  getById: async id => {\n    return request(`/products/${id}`);\n  },\n  // Get products by category\n  getByCategory: async category => {\n    const all = await request(\"/products\");\n    return all.filter(p => p.category === category);\n  },\n  // Get products by diet\n  getByDiet: async diet => {\n    const all = await request(\"/products\");\n    return all.filter(p => (p.dietCompatible || []).includes(diet));\n  },\n  // Search products\n  search: async query => {\n    const all = await request(\"/products\");\n    return all.filter(product => product.name.toLowerCase().includes(query.toLowerCase()) || product.description.toLowerCase().includes(query.toLowerCase()));\n  },\n  // Get product categories\n  getCategories: async () => {\n    return request(\"/categories\");\n  }\n};\n\n// Cart API\nexport const cartAPI = {\n  // Get user cart\n  getCart: async userId => {\n    if (!userId) {\n      throw new Error('User ID is required');\n    }\n    return request(`/users/${userId}/cart`);\n  },\n  // Add item to cart\n  addItem: async (userId, productId, quantity = 1) => {\n    if (!userId) {\n      throw new Error('User ID is required');\n    }\n    if (!productId) {\n      throw new Error('Product ID is required');\n    }\n    return request(`/users/${userId}/cart/items`, {\n      method: 'POST',\n      body: JSON.stringify({\n        productId,\n        quantity\n      })\n    });\n  },\n  // Update item quantity\n  updateQuantity: async (userId, productId, quantity) => {\n    if (!userId) {\n      throw new Error('User ID is required');\n    }\n    if (!productId) {\n      throw new Error('Product ID is required');\n    }\n    return request(`/users/${userId}/cart/items/${productId}`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        quantity\n      })\n    });\n  },\n  // Remove item from cart\n  removeItem: async (userId, productId) => {\n    if (!userId) {\n      throw new Error('User ID is required');\n    }\n    if (!productId) {\n      throw new Error('Product ID is required');\n    }\n    await request(`/users/${userId}/cart/items/${productId}`, {\n      method: 'DELETE'\n    });\n    return request(`/users/${userId}/cart`);\n  },\n  // Clear cart\n  clearCart: async userId => {\n    if (!userId) {\n      throw new Error('User ID is required');\n    }\n    await request(`/users/${userId}/cart`, {\n      method: 'DELETE'\n    });\n    return {\n      items: [],\n      total: 0\n    };\n  }\n};\n\n// Orders API\nexport const ordersAPI = {\n  // Create order from cart\n  createOrder: async (userId, orderData) => {\n    if (!userId) {\n      throw new Error('User ID is required');\n    }\n    return request(`/users/${userId}/orders`, {\n      method: 'POST',\n      body: JSON.stringify(orderData)\n    });\n  },\n  // Get user orders\n  getUserOrders: async userId => {\n    if (!userId) {\n      throw new Error('User ID is required');\n    }\n    return request(`/users/${userId}/orders`);\n  },\n  // Get order by ID\n  getOrderById: async orderId => {\n    // Optional: implement endpoint in backend if needed\n    throw new Error('Not implemented');\n  }\n};\n\n// Recipes API\nexport const recipesAPI = {\n  // Get all recipes\n  getAll: async () => {\n    return request(\"/recipes\");\n  },\n  // Get recipe by ID\n  getById: async id => {\n    return request(`/recipes/${id}`);\n  },\n  // Get recipes by diet\n  getByDiet: async diet => {\n    const all = await request(\"/recipes\");\n    return all.filter(recipe => (recipe.dietCompatible || []).includes(diet));\n  },\n  // Get recipes by ingredients (pantry sync)\n  getByIngredients: async ingredients => {\n    const all = await request(\"/recipes\");\n    return all.filter(recipe => {\n      const recipeIngredients = recipe.ingredients.map(ing => ing.name.toLowerCase());\n      const userIngredients = ingredients.map(ing => ing.toLowerCase());\n      return recipeIngredients.some(recipeIng => userIngredients.some(userIng => userIng.includes(recipeIng) || recipeIng.includes(userIng)));\n    });\n  }\n};\n\n// Partnerships API\nexport const partnershipsAPI = {\n  // Get all partnerships\n  getAll: async () => {\n    return request(\"/partnerships\");\n  },\n  // Get partnership by ID\n  getById: async id => {\n    return request(`/partnerships/${id}`);\n  }\n};\n\n// User Progress API\nexport const progressAPI = {\n  // Get user progress\n  getUserProgress: async userId => {\n    throw new Error(\"Not implemented\");\n  },\n  // Update user progress\n  updateProgress: async (userId, progressData) => {\n    throw new Error(\"Not implemented\");\n  }\n};\n\n// Dashboard API\nexport const dashboardAPI = {\n  // Get dashboard data\n  getDashboardData: async userId => {\n    if (!userId) {\n      throw new Error('User ID is required');\n    }\n    const user = await authAPI.getUser(userId);\n    const cart = await cartAPI.getCart(userId);\n    const orders = await ordersAPI.getUserOrders(userId);\n    return {\n      user,\n      cart,\n      recentOrders: orders.slice(0, 3)\n    };\n  }\n};\n\n// Export all APIs\nexport default {\n  auth: authAPI,\n  dietPlans: dietPlansAPI,\n  products: productsAPI,\n  cart: cartAPI,\n  orders: ordersAPI,\n  recipes: recipesAPI,\n  partnerships: partnershipsAPI,\n  progress: progressAPI,\n  dashboard: dashboardAPI\n};","map":{"version":3,"names":["BASE_URL","process","env","REACT_APP_API_BASE_URL","request","path","options","res","fetch","headers","ok","message","status","err","json","_","Error","error","name","includes","authAPI","login","email","password","method","body","JSON","stringify","register","userData","updateProfile","userId","profileData","getUser","dietPlansAPI","getAll","getById","id","getByTags","tags","all","filter","p","suitableFor","some","t","startPlan","dietPlanId","success","startDate","Date","toISOString","productsAPI","getByCategory","category","getByDiet","diet","dietCompatible","search","query","product","toLowerCase","description","getCategories","cartAPI","getCart","addItem","productId","quantity","updateQuantity","removeItem","clearCart","items","total","ordersAPI","createOrder","orderData","getUserOrders","getOrderById","orderId","recipesAPI","recipe","getByIngredients","ingredients","recipeIngredients","map","ing","userIngredients","recipeIng","userIng","partnershipsAPI","progressAPI","getUserProgress","updateProgress","progressData","dashboardAPI","getDashboardData","user","cart","orders","recentOrders","slice","auth","dietPlans","products","recipes","partnerships","progress","dashboard"],"sources":["C:/Users data/Rachit/NutriCart Project/nutriCart/src/services/api.js"],"sourcesContent":["// API Services for NutriCart Application (calls backend server)\r\nconst BASE_URL =\r\n  process.env.REACT_APP_API_BASE_URL || \"http://localhost:4000/api\";\r\n\r\nasync function request(path, options = {}) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}${path}`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        ...(options.headers || {}),\r\n      },\r\n      ...options,\r\n    });\r\n\r\n    if (!res.ok) {\r\n      let message = `Request failed (${res.status})`;\r\n      try {\r\n        const err = await res.json();\r\n        message = err.message || message;\r\n      } catch (_) {\r\n        /* ignore */\r\n      }\r\n      throw new Error(message);\r\n    }\r\n\r\n    // 204 no content\r\n    if (res.status === 204) return null;\r\n    return res.json();\r\n  } catch (error) {\r\n    if (error.name === \"TypeError\" && error.message.includes(\"fetch\")) {\r\n      throw new Error(\r\n        \"Network error: Unable to connect to server. Please check if the backend is running.\"\r\n      );\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Authentication API\r\nexport const authAPI = {\r\n  // Login user\r\n  login: async (email, password) => {\r\n    return request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email, password })\r\n    });\r\n  },\r\n\r\n  // Register new user\r\n  register: async (userData) => {\r\n    return request('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData)\r\n    });\r\n  },\r\n\r\n  // Update user profile\r\n  updateProfile: async (userId, profileData) => {\r\n    if (!userId) {\r\n      throw new Error('User ID is required');\r\n    }\r\n    return request(`/users/${userId}`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify(profileData)\r\n    });\r\n  },\r\n\r\n  // Get user by ID\r\n  getUser: async (userId) => {\r\n    if (!userId) {\r\n      throw new Error('User ID is required');\r\n    }\r\n    return request(`/users/${userId}`);\r\n  }\r\n};\r\n\r\n// Diet Plans API\r\nexport const dietPlansAPI = {\r\n  // Get all diet plans\r\n  getAll: async () => {\r\n    return request(\"/diet-plans\");\r\n  },\r\n\r\n  // Get diet plan by ID\r\n  getById: async (id) => {\r\n    return request(`/diet-plans/${id}`);\r\n  },\r\n\r\n  // Get diet plans by tags\r\n  getByTags: async (tags) => {\r\n    // optional backend route could be added; for now filter client-side\r\n    const all = await request(\"/diet-plans\");\r\n    return all.filter((p) =>\r\n      (p.suitableFor || []).some((t) => tags.includes(t))\r\n    );\r\n  },\r\n\r\n  // Start a diet plan for user\r\n  startPlan: async (userId, dietPlanId) => {\r\n    // placeholder success\r\n    return {\r\n      success: true,\r\n      message: `Started ${dietPlanId}`,\r\n      startDate: new Date().toISOString(),\r\n    };\r\n  },\r\n};\r\n\r\n// Products API\r\nexport const productsAPI = {\r\n  // Get all products\r\n  getAll: async () => {\r\n    return request(\"/products\");\r\n  },\r\n\r\n  // Get product by ID\r\n  getById: async (id) => {\r\n    return request(`/products/${id}`);\r\n  },\r\n\r\n  // Get products by category\r\n  getByCategory: async (category) => {\r\n    const all = await request(\"/products\");\r\n    return all.filter((p) => p.category === category);\r\n  },\r\n\r\n  // Get products by diet\r\n  getByDiet: async (diet) => {\r\n    const all = await request(\"/products\");\r\n    return all.filter((p) => (p.dietCompatible || []).includes(diet));\r\n  },\r\n\r\n  // Search products\r\n  search: async (query) => {\r\n    const all = await request(\"/products\");\r\n    return all.filter(\r\n      (product) =>\r\n        product.name.toLowerCase().includes(query.toLowerCase()) ||\r\n        product.description.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n  },\r\n\r\n  // Get product categories\r\n  getCategories: async () => {\r\n    return request(\"/categories\");\r\n  },\r\n};\r\n\r\n// Cart API\r\nexport const cartAPI = {\r\n  // Get user cart\r\n  getCart: async (userId) => {\r\n    if (!userId) {\r\n      throw new Error('User ID is required');\r\n    }\r\n    return request(`/users/${userId}/cart`);\r\n  },\r\n\r\n  // Add item to cart\r\n  addItem: async (userId, productId, quantity = 1) => {\r\n    if (!userId) {\r\n      throw new Error('User ID is required');\r\n    }\r\n    if (!productId) {\r\n      throw new Error('Product ID is required');\r\n    }\r\n    return request(`/users/${userId}/cart/items`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ productId, quantity })\r\n    });\r\n  },\r\n\r\n  // Update item quantity\r\n  updateQuantity: async (userId, productId, quantity) => {\r\n    if (!userId) {\r\n      throw new Error('User ID is required');\r\n    }\r\n    if (!productId) {\r\n      throw new Error('Product ID is required');\r\n    }\r\n    return request(`/users/${userId}/cart/items/${productId}`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify({ quantity })\r\n    });\r\n  },\r\n\r\n  // Remove item from cart\r\n  removeItem: async (userId, productId) => {\r\n    if (!userId) {\r\n      throw new Error('User ID is required');\r\n    }\r\n    if (!productId) {\r\n      throw new Error('Product ID is required');\r\n    }\r\n    await request(`/users/${userId}/cart/items/${productId}`, { method: 'DELETE' });\r\n    return request(`/users/${userId}/cart`);\r\n  },\r\n\r\n  // Clear cart\r\n  clearCart: async (userId) => {\r\n    if (!userId) {\r\n      throw new Error('User ID is required');\r\n    }\r\n    await request(`/users/${userId}/cart`, { method: 'DELETE' });\r\n    return { items: [], total: 0 };\r\n  }\r\n};\r\n\r\n// Orders API\r\nexport const ordersAPI = {\r\n  // Create order from cart\r\n  createOrder: async (userId, orderData) => {\r\n    if (!userId) {\r\n      throw new Error('User ID is required');\r\n    }\r\n    return request(`/users/${userId}/orders`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(orderData)\r\n    });\r\n  },\r\n\r\n  // Get user orders\r\n  getUserOrders: async (userId) => {\r\n    if (!userId) {\r\n      throw new Error('User ID is required');\r\n    }\r\n    return request(`/users/${userId}/orders`);\r\n  },\r\n\r\n  // Get order by ID\r\n  getOrderById: async (orderId) => {\r\n    // Optional: implement endpoint in backend if needed\r\n    throw new Error('Not implemented');\r\n  }\r\n};\r\n\r\n// Recipes API\r\nexport const recipesAPI = {\r\n  // Get all recipes\r\n  getAll: async () => {\r\n    return request(\"/recipes\");\r\n  },\r\n\r\n  // Get recipe by ID\r\n  getById: async (id) => {\r\n    return request(`/recipes/${id}`);\r\n  },\r\n\r\n  // Get recipes by diet\r\n  getByDiet: async (diet) => {\r\n    const all = await request(\"/recipes\");\r\n    return all.filter((recipe) => (recipe.dietCompatible || []).includes(diet));\r\n  },\r\n\r\n  // Get recipes by ingredients (pantry sync)\r\n  getByIngredients: async (ingredients) => {\r\n    const all = await request(\"/recipes\");\r\n    return all.filter((recipe) => {\r\n      const recipeIngredients = recipe.ingredients.map((ing) =>\r\n        ing.name.toLowerCase()\r\n      );\r\n      const userIngredients = ingredients.map((ing) => ing.toLowerCase());\r\n      return recipeIngredients.some((recipeIng) =>\r\n        userIngredients.some(\r\n          (userIng) =>\r\n            userIng.includes(recipeIng) || recipeIng.includes(userIng)\r\n        )\r\n      );\r\n    });\r\n  },\r\n};\r\n\r\n// Partnerships API\r\nexport const partnershipsAPI = {\r\n  // Get all partnerships\r\n  getAll: async () => {\r\n    return request(\"/partnerships\");\r\n  },\r\n\r\n  // Get partnership by ID\r\n  getById: async (id) => {\r\n    return request(`/partnerships/${id}`);\r\n  },\r\n};\r\n\r\n// User Progress API\r\nexport const progressAPI = {\r\n  // Get user progress\r\n  getUserProgress: async (userId) => {\r\n    throw new Error(\"Not implemented\");\r\n  },\r\n\r\n  // Update user progress\r\n  updateProgress: async (userId, progressData) => {\r\n    throw new Error(\"Not implemented\");\r\n  },\r\n};\r\n\r\n// Dashboard API\r\nexport const dashboardAPI = {\r\n  // Get dashboard data\r\n  getDashboardData: async (userId) => {\r\n    if (!userId) {\r\n      throw new Error('User ID is required');\r\n    }\r\n    const user = await authAPI.getUser(userId);\r\n    const cart = await cartAPI.getCart(userId);\r\n    const orders = await ordersAPI.getUserOrders(userId);\r\n    return { user, cart, recentOrders: orders.slice(0, 3) };\r\n  }\r\n};\r\n\r\n// Export all APIs\r\nexport default {\r\n  auth: authAPI,\r\n  dietPlans: dietPlansAPI,\r\n  products: productsAPI,\r\n  cart: cartAPI,\r\n  orders: ordersAPI,\r\n  recipes: recipesAPI,\r\n  partnerships: partnershipsAPI,\r\n  progress: progressAPI,\r\n  dashboard: dashboardAPI,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}